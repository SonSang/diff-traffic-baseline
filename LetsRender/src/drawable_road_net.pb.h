// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drawable_road_net.proto

#ifndef PROTOBUF_drawable_5froad_5fnet_2eproto__INCLUDED
#define PROTOBUF_drawable_5froad_5fnet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_drawable_5froad_5fnet_2eproto();
void protobuf_AssignDesc_drawable_5froad_5fnet_2eproto();
void protobuf_ShutdownFile_drawable_5froad_5fnet_2eproto();

class VertexMessage;
class GeometryMessage;
class SurfaceMessage;
class RoadClassMessage;
class RoadClassTupleMessage;
class SumoRoadNetworkMessage;

enum GeometryMessage_DrawMode {
  GeometryMessage_DrawMode_Points = 1,
  GeometryMessage_DrawMode_Tris = 2,
  GeometryMessage_DrawMode_Quads = 3,
  GeometryMessage_DrawMode_Lines = 4
};
bool GeometryMessage_DrawMode_IsValid(int value);
const GeometryMessage_DrawMode GeometryMessage_DrawMode_DrawMode_MIN = GeometryMessage_DrawMode_Points;
const GeometryMessage_DrawMode GeometryMessage_DrawMode_DrawMode_MAX = GeometryMessage_DrawMode_Lines;
const int GeometryMessage_DrawMode_DrawMode_ARRAYSIZE = GeometryMessage_DrawMode_DrawMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* GeometryMessage_DrawMode_descriptor();
inline const ::std::string& GeometryMessage_DrawMode_Name(GeometryMessage_DrawMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    GeometryMessage_DrawMode_descriptor(), value);
}
inline bool GeometryMessage_DrawMode_Parse(
    const ::std::string& name, GeometryMessage_DrawMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GeometryMessage_DrawMode>(
    GeometryMessage_DrawMode_descriptor(), name, value);
}
// ===================================================================

class VertexMessage : public ::google::protobuf::Message {
 public:
  VertexMessage();
  virtual ~VertexMessage();

  VertexMessage(const VertexMessage& from);

  inline VertexMessage& operator=(const VertexMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VertexMessage& default_instance();

  void Swap(VertexMessage* other);

  // implements Message ----------------------------------------------

  VertexMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VertexMessage& from);
  void MergeFrom(const VertexMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:VertexMessage)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  friend void  protobuf_AddDesc_drawable_5froad_5fnet_2eproto();
  friend void protobuf_AssignDesc_drawable_5froad_5fnet_2eproto();
  friend void protobuf_ShutdownFile_drawable_5froad_5fnet_2eproto();

  void InitAsDefaultInstance();
  static VertexMessage* default_instance_;
};
// -------------------------------------------------------------------

class GeometryMessage : public ::google::protobuf::Message {
 public:
  GeometryMessage();
  virtual ~GeometryMessage();

  GeometryMessage(const GeometryMessage& from);

  inline GeometryMessage& operator=(const GeometryMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GeometryMessage& default_instance();

  void Swap(GeometryMessage* other);

  // implements Message ----------------------------------------------

  GeometryMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GeometryMessage& from);
  void MergeFrom(const GeometryMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GeometryMessage_DrawMode DrawMode;
  static const DrawMode Points = GeometryMessage_DrawMode_Points;
  static const DrawMode Tris = GeometryMessage_DrawMode_Tris;
  static const DrawMode Quads = GeometryMessage_DrawMode_Quads;
  static const DrawMode Lines = GeometryMessage_DrawMode_Lines;
  static inline bool DrawMode_IsValid(int value) {
    return GeometryMessage_DrawMode_IsValid(value);
  }
  static const DrawMode DrawMode_MIN =
    GeometryMessage_DrawMode_DrawMode_MIN;
  static const DrawMode DrawMode_MAX =
    GeometryMessage_DrawMode_DrawMode_MAX;
  static const int DrawMode_ARRAYSIZE =
    GeometryMessage_DrawMode_DrawMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DrawMode_descriptor() {
    return GeometryMessage_DrawMode_descriptor();
  }
  static inline const ::std::string& DrawMode_Name(DrawMode value) {
    return GeometryMessage_DrawMode_Name(value);
  }
  static inline bool DrawMode_Parse(const ::std::string& name,
      DrawMode* value) {
    return GeometryMessage_DrawMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 numVertices = 1;
  inline bool has_numvertices() const;
  inline void clear_numvertices();
  static const int kNumVerticesFieldNumber = 1;
  inline ::google::protobuf::int32 numvertices() const;
  inline void set_numvertices(::google::protobuf::int32 value);

  // required int32 numIndices = 2;
  inline bool has_numindices() const;
  inline void clear_numindices();
  static const int kNumIndicesFieldNumber = 2;
  inline ::google::protobuf::int32 numindices() const;
  inline void set_numindices(::google::protobuf::int32 value);

  // required .GeometryMessage.DrawMode drawMode = 3;
  inline bool has_drawmode() const;
  inline void clear_drawmode();
  static const int kDrawModeFieldNumber = 3;
  inline ::GeometryMessage_DrawMode drawmode() const;
  inline void set_drawmode(::GeometryMessage_DrawMode value);

  // repeated .VertexMessage vertices = 4;
  inline int vertices_size() const;
  inline void clear_vertices();
  static const int kVerticesFieldNumber = 4;
  inline const ::VertexMessage& vertices(int index) const;
  inline ::VertexMessage* mutable_vertices(int index);
  inline ::VertexMessage* add_vertices();
  inline const ::google::protobuf::RepeatedPtrField< ::VertexMessage >&
      vertices() const;
  inline ::google::protobuf::RepeatedPtrField< ::VertexMessage >*
      mutable_vertices();

  // repeated int32 indices = 5;
  inline int indices_size() const;
  inline void clear_indices();
  static const int kIndicesFieldNumber = 5;
  inline ::google::protobuf::int32 indices(int index) const;
  inline void set_indices(int index, ::google::protobuf::int32 value);
  inline void add_indices(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      indices() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_indices();

  // @@protoc_insertion_point(class_scope:GeometryMessage)
 private:
  inline void set_has_numvertices();
  inline void clear_has_numvertices();
  inline void set_has_numindices();
  inline void clear_has_numindices();
  inline void set_has_drawmode();
  inline void clear_has_drawmode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 numvertices_;
  ::google::protobuf::int32 numindices_;
  ::google::protobuf::RepeatedPtrField< ::VertexMessage > vertices_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > indices_;
  int drawmode_;
  friend void  protobuf_AddDesc_drawable_5froad_5fnet_2eproto();
  friend void protobuf_AssignDesc_drawable_5froad_5fnet_2eproto();
  friend void protobuf_ShutdownFile_drawable_5froad_5fnet_2eproto();

  void InitAsDefaultInstance();
  static GeometryMessage* default_instance_;
};
// -------------------------------------------------------------------

class SurfaceMessage : public ::google::protobuf::Message {
 public:
  SurfaceMessage();
  virtual ~SurfaceMessage();

  SurfaceMessage(const SurfaceMessage& from);

  inline SurfaceMessage& operator=(const SurfaceMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SurfaceMessage& default_instance();

  void Swap(SurfaceMessage* other);

  // implements Message ----------------------------------------------

  SurfaceMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SurfaceMessage& from);
  void MergeFrom(const SurfaceMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .GeometryMessage geometry = 1;
  inline bool has_geometry() const;
  inline void clear_geometry();
  static const int kGeometryFieldNumber = 1;
  inline const ::GeometryMessage& geometry() const;
  inline ::GeometryMessage* mutable_geometry();
  inline ::GeometryMessage* release_geometry();
  inline void set_allocated_geometry(::GeometryMessage* geometry);

  // @@protoc_insertion_point(class_scope:SurfaceMessage)
 private:
  inline void set_has_geometry();
  inline void clear_has_geometry();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::GeometryMessage* geometry_;
  friend void  protobuf_AddDesc_drawable_5froad_5fnet_2eproto();
  friend void protobuf_AssignDesc_drawable_5froad_5fnet_2eproto();
  friend void protobuf_ShutdownFile_drawable_5froad_5fnet_2eproto();

  void InitAsDefaultInstance();
  static SurfaceMessage* default_instance_;
};
// -------------------------------------------------------------------

class RoadClassMessage : public ::google::protobuf::Message {
 public:
  RoadClassMessage();
  virtual ~RoadClassMessage();

  RoadClassMessage(const RoadClassMessage& from);

  inline RoadClassMessage& operator=(const RoadClassMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoadClassMessage& default_instance();

  void Swap(RoadClassMessage* other);

  // implements Message ----------------------------------------------

  RoadClassMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoadClassMessage& from);
  void MergeFrom(const RoadClassMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float h0 = 1;
  inline bool has_h0() const;
  inline void clear_h0();
  static const int kH0FieldNumber = 1;
  inline float h0() const;
  inline void set_h0(float value);

  // optional float s0 = 2;
  inline bool has_s0() const;
  inline void clear_s0();
  static const int kS0FieldNumber = 2;
  inline float s0() const;
  inline void set_s0(float value);

  // optional float v0 = 3;
  inline bool has_v0() const;
  inline void clear_v0();
  static const int kV0FieldNumber = 3;
  inline float v0() const;
  inline void set_v0(float value);

  // optional float h1 = 4;
  inline bool has_h1() const;
  inline void clear_h1();
  static const int kH1FieldNumber = 4;
  inline float h1() const;
  inline void set_h1(float value);

  // optional float s1 = 5;
  inline bool has_s1() const;
  inline void clear_s1();
  static const int kS1FieldNumber = 5;
  inline float s1() const;
  inline void set_s1(float value);

  // optional float v1 = 6;
  inline bool has_v1() const;
  inline void clear_v1();
  static const int kV1FieldNumber = 6;
  inline float v1() const;
  inline void set_v1(float value);

  // optional string road_class = 7;
  inline bool has_road_class() const;
  inline void clear_road_class();
  static const int kRoadClassFieldNumber = 7;
  inline const ::std::string& road_class() const;
  inline void set_road_class(const ::std::string& value);
  inline void set_road_class(const char* value);
  inline void set_road_class(const char* value, size_t size);
  inline ::std::string* mutable_road_class();
  inline ::std::string* release_road_class();
  inline void set_allocated_road_class(::std::string* road_class);

  // optional int32 lanes = 8;
  inline bool has_lanes() const;
  inline void clear_lanes();
  static const int kLanesFieldNumber = 8;
  inline ::google::protobuf::int32 lanes() const;
  inline void set_lanes(::google::protobuf::int32 value);

  // required .SurfaceMessage surface = 9;
  inline bool has_surface() const;
  inline void clear_surface();
  static const int kSurfaceFieldNumber = 9;
  inline const ::SurfaceMessage& surface() const;
  inline ::SurfaceMessage* mutable_surface();
  inline ::SurfaceMessage* release_surface();
  inline void set_allocated_surface(::SurfaceMessage* surface);

  // @@protoc_insertion_point(class_scope:RoadClassMessage)
 private:
  inline void set_has_h0();
  inline void clear_has_h0();
  inline void set_has_s0();
  inline void clear_has_s0();
  inline void set_has_v0();
  inline void clear_has_v0();
  inline void set_has_h1();
  inline void clear_has_h1();
  inline void set_has_s1();
  inline void clear_has_s1();
  inline void set_has_v1();
  inline void clear_has_v1();
  inline void set_has_road_class();
  inline void clear_has_road_class();
  inline void set_has_lanes();
  inline void clear_has_lanes();
  inline void set_has_surface();
  inline void clear_has_surface();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float h0_;
  float s0_;
  float v0_;
  float h1_;
  float s1_;
  float v1_;
  ::std::string* road_class_;
  ::SurfaceMessage* surface_;
  ::google::protobuf::int32 lanes_;
  friend void  protobuf_AddDesc_drawable_5froad_5fnet_2eproto();
  friend void protobuf_AssignDesc_drawable_5froad_5fnet_2eproto();
  friend void protobuf_ShutdownFile_drawable_5froad_5fnet_2eproto();

  void InitAsDefaultInstance();
  static RoadClassMessage* default_instance_;
};
// -------------------------------------------------------------------

class RoadClassTupleMessage : public ::google::protobuf::Message {
 public:
  RoadClassTupleMessage();
  virtual ~RoadClassTupleMessage();

  RoadClassTupleMessage(const RoadClassTupleMessage& from);

  inline RoadClassTupleMessage& operator=(const RoadClassTupleMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoadClassTupleMessage& default_instance();

  void Swap(RoadClassTupleMessage* other);

  // implements Message ----------------------------------------------

  RoadClassTupleMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoadClassTupleMessage& from);
  void MergeFrom(const RoadClassTupleMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string road_class_name = 1;
  inline bool has_road_class_name() const;
  inline void clear_road_class_name();
  static const int kRoadClassNameFieldNumber = 1;
  inline const ::std::string& road_class_name() const;
  inline void set_road_class_name(const ::std::string& value);
  inline void set_road_class_name(const char* value);
  inline void set_road_class_name(const char* value, size_t size);
  inline ::std::string* mutable_road_class_name();
  inline ::std::string* release_road_class_name();
  inline void set_allocated_road_class_name(::std::string* road_class_name);

  // required .RoadClassMessage road_class = 2;
  inline bool has_road_class() const;
  inline void clear_road_class();
  static const int kRoadClassFieldNumber = 2;
  inline const ::RoadClassMessage& road_class() const;
  inline ::RoadClassMessage* mutable_road_class();
  inline ::RoadClassMessage* release_road_class();
  inline void set_allocated_road_class(::RoadClassMessage* road_class);

  // @@protoc_insertion_point(class_scope:RoadClassTupleMessage)
 private:
  inline void set_has_road_class_name();
  inline void clear_has_road_class_name();
  inline void set_has_road_class();
  inline void clear_has_road_class();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* road_class_name_;
  ::RoadClassMessage* road_class_;
  friend void  protobuf_AddDesc_drawable_5froad_5fnet_2eproto();
  friend void protobuf_AssignDesc_drawable_5froad_5fnet_2eproto();
  friend void protobuf_ShutdownFile_drawable_5froad_5fnet_2eproto();

  void InitAsDefaultInstance();
  static RoadClassTupleMessage* default_instance_;
};
// -------------------------------------------------------------------

class SumoRoadNetworkMessage : public ::google::protobuf::Message {
 public:
  SumoRoadNetworkMessage();
  virtual ~SumoRoadNetworkMessage();

  SumoRoadNetworkMessage(const SumoRoadNetworkMessage& from);

  inline SumoRoadNetworkMessage& operator=(const SumoRoadNetworkMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SumoRoadNetworkMessage& default_instance();

  void Swap(SumoRoadNetworkMessage* other);

  // implements Message ----------------------------------------------

  SumoRoadNetworkMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SumoRoadNetworkMessage& from);
  void MergeFrom(const SumoRoadNetworkMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .RoadClassTupleMessage tuples = 1;
  inline int tuples_size() const;
  inline void clear_tuples();
  static const int kTuplesFieldNumber = 1;
  inline const ::RoadClassTupleMessage& tuples(int index) const;
  inline ::RoadClassTupleMessage* mutable_tuples(int index);
  inline ::RoadClassTupleMessage* add_tuples();
  inline const ::google::protobuf::RepeatedPtrField< ::RoadClassTupleMessage >&
      tuples() const;
  inline ::google::protobuf::RepeatedPtrField< ::RoadClassTupleMessage >*
      mutable_tuples();

  // required float offset_x = 2;
  inline bool has_offset_x() const;
  inline void clear_offset_x();
  static const int kOffsetXFieldNumber = 2;
  inline float offset_x() const;
  inline void set_offset_x(float value);

  // required float offset_y = 3;
  inline bool has_offset_y() const;
  inline void clear_offset_y();
  static const int kOffsetYFieldNumber = 3;
  inline float offset_y() const;
  inline void set_offset_y(float value);

  // @@protoc_insertion_point(class_scope:SumoRoadNetworkMessage)
 private:
  inline void set_has_offset_x();
  inline void clear_has_offset_x();
  inline void set_has_offset_y();
  inline void clear_has_offset_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::RoadClassTupleMessage > tuples_;
  float offset_x_;
  float offset_y_;
  friend void  protobuf_AddDesc_drawable_5froad_5fnet_2eproto();
  friend void protobuf_AssignDesc_drawable_5froad_5fnet_2eproto();
  friend void protobuf_ShutdownFile_drawable_5froad_5fnet_2eproto();

  void InitAsDefaultInstance();
  static SumoRoadNetworkMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// VertexMessage

// required float x = 1;
inline bool VertexMessage::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VertexMessage::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VertexMessage::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VertexMessage::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float VertexMessage::x() const {
  // @@protoc_insertion_point(field_get:VertexMessage.x)
  return x_;
}
inline void VertexMessage::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:VertexMessage.x)
}

// required float y = 2;
inline bool VertexMessage::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VertexMessage::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VertexMessage::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VertexMessage::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float VertexMessage::y() const {
  // @@protoc_insertion_point(field_get:VertexMessage.y)
  return y_;
}
inline void VertexMessage::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:VertexMessage.y)
}

// required float z = 3;
inline bool VertexMessage::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VertexMessage::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VertexMessage::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VertexMessage::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float VertexMessage::z() const {
  // @@protoc_insertion_point(field_get:VertexMessage.z)
  return z_;
}
inline void VertexMessage::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:VertexMessage.z)
}

// -------------------------------------------------------------------

// GeometryMessage

// required int32 numVertices = 1;
inline bool GeometryMessage::has_numvertices() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GeometryMessage::set_has_numvertices() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GeometryMessage::clear_has_numvertices() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GeometryMessage::clear_numvertices() {
  numvertices_ = 0;
  clear_has_numvertices();
}
inline ::google::protobuf::int32 GeometryMessage::numvertices() const {
  // @@protoc_insertion_point(field_get:GeometryMessage.numVertices)
  return numvertices_;
}
inline void GeometryMessage::set_numvertices(::google::protobuf::int32 value) {
  set_has_numvertices();
  numvertices_ = value;
  // @@protoc_insertion_point(field_set:GeometryMessage.numVertices)
}

// required int32 numIndices = 2;
inline bool GeometryMessage::has_numindices() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GeometryMessage::set_has_numindices() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GeometryMessage::clear_has_numindices() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GeometryMessage::clear_numindices() {
  numindices_ = 0;
  clear_has_numindices();
}
inline ::google::protobuf::int32 GeometryMessage::numindices() const {
  // @@protoc_insertion_point(field_get:GeometryMessage.numIndices)
  return numindices_;
}
inline void GeometryMessage::set_numindices(::google::protobuf::int32 value) {
  set_has_numindices();
  numindices_ = value;
  // @@protoc_insertion_point(field_set:GeometryMessage.numIndices)
}

// required .GeometryMessage.DrawMode drawMode = 3;
inline bool GeometryMessage::has_drawmode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GeometryMessage::set_has_drawmode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GeometryMessage::clear_has_drawmode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GeometryMessage::clear_drawmode() {
  drawmode_ = 1;
  clear_has_drawmode();
}
inline ::GeometryMessage_DrawMode GeometryMessage::drawmode() const {
  // @@protoc_insertion_point(field_get:GeometryMessage.drawMode)
  return static_cast< ::GeometryMessage_DrawMode >(drawmode_);
}
inline void GeometryMessage::set_drawmode(::GeometryMessage_DrawMode value) {
  assert(::GeometryMessage_DrawMode_IsValid(value));
  set_has_drawmode();
  drawmode_ = value;
  // @@protoc_insertion_point(field_set:GeometryMessage.drawMode)
}

// repeated .VertexMessage vertices = 4;
inline int GeometryMessage::vertices_size() const {
  return vertices_.size();
}
inline void GeometryMessage::clear_vertices() {
  vertices_.Clear();
}
inline const ::VertexMessage& GeometryMessage::vertices(int index) const {
  // @@protoc_insertion_point(field_get:GeometryMessage.vertices)
  return vertices_.Get(index);
}
inline ::VertexMessage* GeometryMessage::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:GeometryMessage.vertices)
  return vertices_.Mutable(index);
}
inline ::VertexMessage* GeometryMessage::add_vertices() {
  // @@protoc_insertion_point(field_add:GeometryMessage.vertices)
  return vertices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::VertexMessage >&
GeometryMessage::vertices() const {
  // @@protoc_insertion_point(field_list:GeometryMessage.vertices)
  return vertices_;
}
inline ::google::protobuf::RepeatedPtrField< ::VertexMessage >*
GeometryMessage::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:GeometryMessage.vertices)
  return &vertices_;
}

// repeated int32 indices = 5;
inline int GeometryMessage::indices_size() const {
  return indices_.size();
}
inline void GeometryMessage::clear_indices() {
  indices_.Clear();
}
inline ::google::protobuf::int32 GeometryMessage::indices(int index) const {
  // @@protoc_insertion_point(field_get:GeometryMessage.indices)
  return indices_.Get(index);
}
inline void GeometryMessage::set_indices(int index, ::google::protobuf::int32 value) {
  indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:GeometryMessage.indices)
}
inline void GeometryMessage::add_indices(::google::protobuf::int32 value) {
  indices_.Add(value);
  // @@protoc_insertion_point(field_add:GeometryMessage.indices)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GeometryMessage::indices() const {
  // @@protoc_insertion_point(field_list:GeometryMessage.indices)
  return indices_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GeometryMessage::mutable_indices() {
  // @@protoc_insertion_point(field_mutable_list:GeometryMessage.indices)
  return &indices_;
}

// -------------------------------------------------------------------

// SurfaceMessage

// required .GeometryMessage geometry = 1;
inline bool SurfaceMessage::has_geometry() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SurfaceMessage::set_has_geometry() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SurfaceMessage::clear_has_geometry() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SurfaceMessage::clear_geometry() {
  if (geometry_ != NULL) geometry_->::GeometryMessage::Clear();
  clear_has_geometry();
}
inline const ::GeometryMessage& SurfaceMessage::geometry() const {
  // @@protoc_insertion_point(field_get:SurfaceMessage.geometry)
  return geometry_ != NULL ? *geometry_ : *default_instance_->geometry_;
}
inline ::GeometryMessage* SurfaceMessage::mutable_geometry() {
  set_has_geometry();
  if (geometry_ == NULL) geometry_ = new ::GeometryMessage;
  // @@protoc_insertion_point(field_mutable:SurfaceMessage.geometry)
  return geometry_;
}
inline ::GeometryMessage* SurfaceMessage::release_geometry() {
  clear_has_geometry();
  ::GeometryMessage* temp = geometry_;
  geometry_ = NULL;
  return temp;
}
inline void SurfaceMessage::set_allocated_geometry(::GeometryMessage* geometry) {
  delete geometry_;
  geometry_ = geometry;
  if (geometry) {
    set_has_geometry();
  } else {
    clear_has_geometry();
  }
  // @@protoc_insertion_point(field_set_allocated:SurfaceMessage.geometry)
}

// -------------------------------------------------------------------

// RoadClassMessage

// optional float h0 = 1;
inline bool RoadClassMessage::has_h0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoadClassMessage::set_has_h0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoadClassMessage::clear_has_h0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoadClassMessage::clear_h0() {
  h0_ = 0;
  clear_has_h0();
}
inline float RoadClassMessage::h0() const {
  // @@protoc_insertion_point(field_get:RoadClassMessage.h0)
  return h0_;
}
inline void RoadClassMessage::set_h0(float value) {
  set_has_h0();
  h0_ = value;
  // @@protoc_insertion_point(field_set:RoadClassMessage.h0)
}

// optional float s0 = 2;
inline bool RoadClassMessage::has_s0() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoadClassMessage::set_has_s0() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoadClassMessage::clear_has_s0() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoadClassMessage::clear_s0() {
  s0_ = 0;
  clear_has_s0();
}
inline float RoadClassMessage::s0() const {
  // @@protoc_insertion_point(field_get:RoadClassMessage.s0)
  return s0_;
}
inline void RoadClassMessage::set_s0(float value) {
  set_has_s0();
  s0_ = value;
  // @@protoc_insertion_point(field_set:RoadClassMessage.s0)
}

// optional float v0 = 3;
inline bool RoadClassMessage::has_v0() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoadClassMessage::set_has_v0() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoadClassMessage::clear_has_v0() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoadClassMessage::clear_v0() {
  v0_ = 0;
  clear_has_v0();
}
inline float RoadClassMessage::v0() const {
  // @@protoc_insertion_point(field_get:RoadClassMessage.v0)
  return v0_;
}
inline void RoadClassMessage::set_v0(float value) {
  set_has_v0();
  v0_ = value;
  // @@protoc_insertion_point(field_set:RoadClassMessage.v0)
}

// optional float h1 = 4;
inline bool RoadClassMessage::has_h1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoadClassMessage::set_has_h1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoadClassMessage::clear_has_h1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoadClassMessage::clear_h1() {
  h1_ = 0;
  clear_has_h1();
}
inline float RoadClassMessage::h1() const {
  // @@protoc_insertion_point(field_get:RoadClassMessage.h1)
  return h1_;
}
inline void RoadClassMessage::set_h1(float value) {
  set_has_h1();
  h1_ = value;
  // @@protoc_insertion_point(field_set:RoadClassMessage.h1)
}

// optional float s1 = 5;
inline bool RoadClassMessage::has_s1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoadClassMessage::set_has_s1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoadClassMessage::clear_has_s1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoadClassMessage::clear_s1() {
  s1_ = 0;
  clear_has_s1();
}
inline float RoadClassMessage::s1() const {
  // @@protoc_insertion_point(field_get:RoadClassMessage.s1)
  return s1_;
}
inline void RoadClassMessage::set_s1(float value) {
  set_has_s1();
  s1_ = value;
  // @@protoc_insertion_point(field_set:RoadClassMessage.s1)
}

// optional float v1 = 6;
inline bool RoadClassMessage::has_v1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoadClassMessage::set_has_v1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RoadClassMessage::clear_has_v1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RoadClassMessage::clear_v1() {
  v1_ = 0;
  clear_has_v1();
}
inline float RoadClassMessage::v1() const {
  // @@protoc_insertion_point(field_get:RoadClassMessage.v1)
  return v1_;
}
inline void RoadClassMessage::set_v1(float value) {
  set_has_v1();
  v1_ = value;
  // @@protoc_insertion_point(field_set:RoadClassMessage.v1)
}

// optional string road_class = 7;
inline bool RoadClassMessage::has_road_class() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoadClassMessage::set_has_road_class() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RoadClassMessage::clear_has_road_class() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RoadClassMessage::clear_road_class() {
  if (road_class_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    road_class_->clear();
  }
  clear_has_road_class();
}
inline const ::std::string& RoadClassMessage::road_class() const {
  // @@protoc_insertion_point(field_get:RoadClassMessage.road_class)
  return *road_class_;
}
inline void RoadClassMessage::set_road_class(const ::std::string& value) {
  set_has_road_class();
  if (road_class_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    road_class_ = new ::std::string;
  }
  road_class_->assign(value);
  // @@protoc_insertion_point(field_set:RoadClassMessage.road_class)
}
inline void RoadClassMessage::set_road_class(const char* value) {
  set_has_road_class();
  if (road_class_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    road_class_ = new ::std::string;
  }
  road_class_->assign(value);
  // @@protoc_insertion_point(field_set_char:RoadClassMessage.road_class)
}
inline void RoadClassMessage::set_road_class(const char* value, size_t size) {
  set_has_road_class();
  if (road_class_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    road_class_ = new ::std::string;
  }
  road_class_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RoadClassMessage.road_class)
}
inline ::std::string* RoadClassMessage::mutable_road_class() {
  set_has_road_class();
  if (road_class_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    road_class_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RoadClassMessage.road_class)
  return road_class_;
}
inline ::std::string* RoadClassMessage::release_road_class() {
  clear_has_road_class();
  if (road_class_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = road_class_;
    road_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoadClassMessage::set_allocated_road_class(::std::string* road_class) {
  if (road_class_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete road_class_;
  }
  if (road_class) {
    set_has_road_class();
    road_class_ = road_class;
  } else {
    clear_has_road_class();
    road_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RoadClassMessage.road_class)
}

// optional int32 lanes = 8;
inline bool RoadClassMessage::has_lanes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RoadClassMessage::set_has_lanes() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RoadClassMessage::clear_has_lanes() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RoadClassMessage::clear_lanes() {
  lanes_ = 0;
  clear_has_lanes();
}
inline ::google::protobuf::int32 RoadClassMessage::lanes() const {
  // @@protoc_insertion_point(field_get:RoadClassMessage.lanes)
  return lanes_;
}
inline void RoadClassMessage::set_lanes(::google::protobuf::int32 value) {
  set_has_lanes();
  lanes_ = value;
  // @@protoc_insertion_point(field_set:RoadClassMessage.lanes)
}

// required .SurfaceMessage surface = 9;
inline bool RoadClassMessage::has_surface() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RoadClassMessage::set_has_surface() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RoadClassMessage::clear_has_surface() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RoadClassMessage::clear_surface() {
  if (surface_ != NULL) surface_->::SurfaceMessage::Clear();
  clear_has_surface();
}
inline const ::SurfaceMessage& RoadClassMessage::surface() const {
  // @@protoc_insertion_point(field_get:RoadClassMessage.surface)
  return surface_ != NULL ? *surface_ : *default_instance_->surface_;
}
inline ::SurfaceMessage* RoadClassMessage::mutable_surface() {
  set_has_surface();
  if (surface_ == NULL) surface_ = new ::SurfaceMessage;
  // @@protoc_insertion_point(field_mutable:RoadClassMessage.surface)
  return surface_;
}
inline ::SurfaceMessage* RoadClassMessage::release_surface() {
  clear_has_surface();
  ::SurfaceMessage* temp = surface_;
  surface_ = NULL;
  return temp;
}
inline void RoadClassMessage::set_allocated_surface(::SurfaceMessage* surface) {
  delete surface_;
  surface_ = surface;
  if (surface) {
    set_has_surface();
  } else {
    clear_has_surface();
  }
  // @@protoc_insertion_point(field_set_allocated:RoadClassMessage.surface)
}

// -------------------------------------------------------------------

// RoadClassTupleMessage

// required string road_class_name = 1;
inline bool RoadClassTupleMessage::has_road_class_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoadClassTupleMessage::set_has_road_class_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoadClassTupleMessage::clear_has_road_class_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoadClassTupleMessage::clear_road_class_name() {
  if (road_class_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    road_class_name_->clear();
  }
  clear_has_road_class_name();
}
inline const ::std::string& RoadClassTupleMessage::road_class_name() const {
  // @@protoc_insertion_point(field_get:RoadClassTupleMessage.road_class_name)
  return *road_class_name_;
}
inline void RoadClassTupleMessage::set_road_class_name(const ::std::string& value) {
  set_has_road_class_name();
  if (road_class_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    road_class_name_ = new ::std::string;
  }
  road_class_name_->assign(value);
  // @@protoc_insertion_point(field_set:RoadClassTupleMessage.road_class_name)
}
inline void RoadClassTupleMessage::set_road_class_name(const char* value) {
  set_has_road_class_name();
  if (road_class_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    road_class_name_ = new ::std::string;
  }
  road_class_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:RoadClassTupleMessage.road_class_name)
}
inline void RoadClassTupleMessage::set_road_class_name(const char* value, size_t size) {
  set_has_road_class_name();
  if (road_class_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    road_class_name_ = new ::std::string;
  }
  road_class_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RoadClassTupleMessage.road_class_name)
}
inline ::std::string* RoadClassTupleMessage::mutable_road_class_name() {
  set_has_road_class_name();
  if (road_class_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    road_class_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RoadClassTupleMessage.road_class_name)
  return road_class_name_;
}
inline ::std::string* RoadClassTupleMessage::release_road_class_name() {
  clear_has_road_class_name();
  if (road_class_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = road_class_name_;
    road_class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoadClassTupleMessage::set_allocated_road_class_name(::std::string* road_class_name) {
  if (road_class_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete road_class_name_;
  }
  if (road_class_name) {
    set_has_road_class_name();
    road_class_name_ = road_class_name;
  } else {
    clear_has_road_class_name();
    road_class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RoadClassTupleMessage.road_class_name)
}

// required .RoadClassMessage road_class = 2;
inline bool RoadClassTupleMessage::has_road_class() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoadClassTupleMessage::set_has_road_class() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoadClassTupleMessage::clear_has_road_class() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoadClassTupleMessage::clear_road_class() {
  if (road_class_ != NULL) road_class_->::RoadClassMessage::Clear();
  clear_has_road_class();
}
inline const ::RoadClassMessage& RoadClassTupleMessage::road_class() const {
  // @@protoc_insertion_point(field_get:RoadClassTupleMessage.road_class)
  return road_class_ != NULL ? *road_class_ : *default_instance_->road_class_;
}
inline ::RoadClassMessage* RoadClassTupleMessage::mutable_road_class() {
  set_has_road_class();
  if (road_class_ == NULL) road_class_ = new ::RoadClassMessage;
  // @@protoc_insertion_point(field_mutable:RoadClassTupleMessage.road_class)
  return road_class_;
}
inline ::RoadClassMessage* RoadClassTupleMessage::release_road_class() {
  clear_has_road_class();
  ::RoadClassMessage* temp = road_class_;
  road_class_ = NULL;
  return temp;
}
inline void RoadClassTupleMessage::set_allocated_road_class(::RoadClassMessage* road_class) {
  delete road_class_;
  road_class_ = road_class;
  if (road_class) {
    set_has_road_class();
  } else {
    clear_has_road_class();
  }
  // @@protoc_insertion_point(field_set_allocated:RoadClassTupleMessage.road_class)
}

// -------------------------------------------------------------------

// SumoRoadNetworkMessage

// repeated .RoadClassTupleMessage tuples = 1;
inline int SumoRoadNetworkMessage::tuples_size() const {
  return tuples_.size();
}
inline void SumoRoadNetworkMessage::clear_tuples() {
  tuples_.Clear();
}
inline const ::RoadClassTupleMessage& SumoRoadNetworkMessage::tuples(int index) const {
  // @@protoc_insertion_point(field_get:SumoRoadNetworkMessage.tuples)
  return tuples_.Get(index);
}
inline ::RoadClassTupleMessage* SumoRoadNetworkMessage::mutable_tuples(int index) {
  // @@protoc_insertion_point(field_mutable:SumoRoadNetworkMessage.tuples)
  return tuples_.Mutable(index);
}
inline ::RoadClassTupleMessage* SumoRoadNetworkMessage::add_tuples() {
  // @@protoc_insertion_point(field_add:SumoRoadNetworkMessage.tuples)
  return tuples_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RoadClassTupleMessage >&
SumoRoadNetworkMessage::tuples() const {
  // @@protoc_insertion_point(field_list:SumoRoadNetworkMessage.tuples)
  return tuples_;
}
inline ::google::protobuf::RepeatedPtrField< ::RoadClassTupleMessage >*
SumoRoadNetworkMessage::mutable_tuples() {
  // @@protoc_insertion_point(field_mutable_list:SumoRoadNetworkMessage.tuples)
  return &tuples_;
}

// required float offset_x = 2;
inline bool SumoRoadNetworkMessage::has_offset_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SumoRoadNetworkMessage::set_has_offset_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SumoRoadNetworkMessage::clear_has_offset_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SumoRoadNetworkMessage::clear_offset_x() {
  offset_x_ = 0;
  clear_has_offset_x();
}
inline float SumoRoadNetworkMessage::offset_x() const {
  // @@protoc_insertion_point(field_get:SumoRoadNetworkMessage.offset_x)
  return offset_x_;
}
inline void SumoRoadNetworkMessage::set_offset_x(float value) {
  set_has_offset_x();
  offset_x_ = value;
  // @@protoc_insertion_point(field_set:SumoRoadNetworkMessage.offset_x)
}

// required float offset_y = 3;
inline bool SumoRoadNetworkMessage::has_offset_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SumoRoadNetworkMessage::set_has_offset_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SumoRoadNetworkMessage::clear_has_offset_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SumoRoadNetworkMessage::clear_offset_y() {
  offset_y_ = 0;
  clear_has_offset_y();
}
inline float SumoRoadNetworkMessage::offset_y() const {
  // @@protoc_insertion_point(field_get:SumoRoadNetworkMessage.offset_y)
  return offset_y_;
}
inline void SumoRoadNetworkMessage::set_offset_y(float value) {
  set_has_offset_y();
  offset_y_ = value;
  // @@protoc_insertion_point(field_set:SumoRoadNetworkMessage.offset_y)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::GeometryMessage_DrawMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GeometryMessage_DrawMode>() {
  return ::GeometryMessage_DrawMode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_drawable_5froad_5fnet_2eproto__INCLUDED
