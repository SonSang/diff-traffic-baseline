// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drawable_road_net.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "drawable_road_net.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* VertexMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VertexMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeometryMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeometryMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GeometryMessage_DrawMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SurfaceMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SurfaceMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoadClassMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoadClassMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoadClassTupleMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoadClassTupleMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* SumoRoadNetworkMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SumoRoadNetworkMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_drawable_5froad_5fnet_2eproto() {
  protobuf_AddDesc_drawable_5froad_5fnet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "drawable_road_net.proto");
  GOOGLE_CHECK(file != NULL);
  VertexMessage_descriptor_ = file->message_type(0);
  static const int VertexMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VertexMessage, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VertexMessage, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VertexMessage, z_),
  };
  VertexMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VertexMessage_descriptor_,
      VertexMessage::default_instance_,
      VertexMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VertexMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VertexMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VertexMessage));
  GeometryMessage_descriptor_ = file->message_type(1);
  static const int GeometryMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeometryMessage, numvertices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeometryMessage, numindices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeometryMessage, drawmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeometryMessage, vertices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeometryMessage, indices_),
  };
  GeometryMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GeometryMessage_descriptor_,
      GeometryMessage::default_instance_,
      GeometryMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeometryMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeometryMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GeometryMessage));
  GeometryMessage_DrawMode_descriptor_ = GeometryMessage_descriptor_->enum_type(0);
  SurfaceMessage_descriptor_ = file->message_type(2);
  static const int SurfaceMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfaceMessage, geometry_),
  };
  SurfaceMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SurfaceMessage_descriptor_,
      SurfaceMessage::default_instance_,
      SurfaceMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfaceMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfaceMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SurfaceMessage));
  RoadClassMessage_descriptor_ = file->message_type(3);
  static const int RoadClassMessage_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadClassMessage, h0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadClassMessage, s0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadClassMessage, v0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadClassMessage, h1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadClassMessage, s1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadClassMessage, v1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadClassMessage, road_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadClassMessage, lanes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadClassMessage, surface_),
  };
  RoadClassMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoadClassMessage_descriptor_,
      RoadClassMessage::default_instance_,
      RoadClassMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadClassMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadClassMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoadClassMessage));
  RoadClassTupleMessage_descriptor_ = file->message_type(4);
  static const int RoadClassTupleMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadClassTupleMessage, road_class_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadClassTupleMessage, road_class_),
  };
  RoadClassTupleMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoadClassTupleMessage_descriptor_,
      RoadClassTupleMessage::default_instance_,
      RoadClassTupleMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadClassTupleMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadClassTupleMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoadClassTupleMessage));
  SumoRoadNetworkMessage_descriptor_ = file->message_type(5);
  static const int SumoRoadNetworkMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SumoRoadNetworkMessage, tuples_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SumoRoadNetworkMessage, offset_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SumoRoadNetworkMessage, offset_y_),
  };
  SumoRoadNetworkMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SumoRoadNetworkMessage_descriptor_,
      SumoRoadNetworkMessage::default_instance_,
      SumoRoadNetworkMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SumoRoadNetworkMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SumoRoadNetworkMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SumoRoadNetworkMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_drawable_5froad_5fnet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VertexMessage_descriptor_, &VertexMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GeometryMessage_descriptor_, &GeometryMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SurfaceMessage_descriptor_, &SurfaceMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoadClassMessage_descriptor_, &RoadClassMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoadClassTupleMessage_descriptor_, &RoadClassTupleMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SumoRoadNetworkMessage_descriptor_, &SumoRoadNetworkMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_drawable_5froad_5fnet_2eproto() {
  delete VertexMessage::default_instance_;
  delete VertexMessage_reflection_;
  delete GeometryMessage::default_instance_;
  delete GeometryMessage_reflection_;
  delete SurfaceMessage::default_instance_;
  delete SurfaceMessage_reflection_;
  delete RoadClassMessage::default_instance_;
  delete RoadClassMessage_reflection_;
  delete RoadClassTupleMessage::default_instance_;
  delete RoadClassTupleMessage_reflection_;
  delete SumoRoadNetworkMessage::default_instance_;
  delete SumoRoadNetworkMessage_reflection_;
}

void protobuf_AddDesc_drawable_5froad_5fnet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027drawable_road_net.proto\"0\n\rVertexMessa"
    "ge\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\"\322\001\n\017"
    "GeometryMessage\022\023\n\013numVertices\030\001 \002(\005\022\022\n\n"
    "numIndices\030\002 \002(\005\022+\n\010drawMode\030\003 \002(\0162\031.Geo"
    "metryMessage.DrawMode\022 \n\010vertices\030\004 \003(\0132"
    "\016.VertexMessage\022\017\n\007indices\030\005 \003(\005\"6\n\010Draw"
    "Mode\022\n\n\006Points\020\001\022\010\n\004Tris\020\002\022\t\n\005Quads\020\003\022\t\n"
    "\005Lines\020\004\"4\n\016SurfaceMessage\022\"\n\010geometry\030\001"
    " \002(\0132\020.GeometryMessage\"\237\001\n\020RoadClassMess"
    "age\022\n\n\002h0\030\001 \001(\002\022\n\n\002s0\030\002 \001(\002\022\n\n\002v0\030\003 \001(\002\022"
    "\n\n\002h1\030\004 \001(\002\022\n\n\002s1\030\005 \001(\002\022\n\n\002v1\030\006 \001(\002\022\022\n\nr"
    "oad_class\030\007 \001(\t\022\r\n\005lanes\030\010 \001(\005\022 \n\007surfac"
    "e\030\t \002(\0132\017.SurfaceMessage\"W\n\025RoadClassTup"
    "leMessage\022\027\n\017road_class_name\030\001 \002(\t\022%\n\nro"
    "ad_class\030\002 \002(\0132\021.RoadClassMessage\"d\n\026Sum"
    "oRoadNetworkMessage\022&\n\006tuples\030\001 \003(\0132\026.Ro"
    "adClassTupleMessage\022\020\n\010offset_x\030\002 \002(\002\022\020\n"
    "\010offset_y\030\003 \002(\002", 695);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "drawable_road_net.proto", &protobuf_RegisterTypes);
  VertexMessage::default_instance_ = new VertexMessage();
  GeometryMessage::default_instance_ = new GeometryMessage();
  SurfaceMessage::default_instance_ = new SurfaceMessage();
  RoadClassMessage::default_instance_ = new RoadClassMessage();
  RoadClassTupleMessage::default_instance_ = new RoadClassTupleMessage();
  SumoRoadNetworkMessage::default_instance_ = new SumoRoadNetworkMessage();
  VertexMessage::default_instance_->InitAsDefaultInstance();
  GeometryMessage::default_instance_->InitAsDefaultInstance();
  SurfaceMessage::default_instance_->InitAsDefaultInstance();
  RoadClassMessage::default_instance_->InitAsDefaultInstance();
  RoadClassTupleMessage::default_instance_->InitAsDefaultInstance();
  SumoRoadNetworkMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_drawable_5froad_5fnet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_drawable_5froad_5fnet_2eproto {
  StaticDescriptorInitializer_drawable_5froad_5fnet_2eproto() {
    protobuf_AddDesc_drawable_5froad_5fnet_2eproto();
  }
} static_descriptor_initializer_drawable_5froad_5fnet_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int VertexMessage::kXFieldNumber;
const int VertexMessage::kYFieldNumber;
const int VertexMessage::kZFieldNumber;
#endif  // !_MSC_VER

VertexMessage::VertexMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VertexMessage)
}

void VertexMessage::InitAsDefaultInstance() {
}

VertexMessage::VertexMessage(const VertexMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VertexMessage)
}

void VertexMessage::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VertexMessage::~VertexMessage() {
  // @@protoc_insertion_point(destructor:VertexMessage)
  SharedDtor();
}

void VertexMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VertexMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VertexMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VertexMessage_descriptor_;
}

const VertexMessage& VertexMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drawable_5froad_5fnet_2eproto();
  return *default_instance_;
}

VertexMessage* VertexMessage::default_instance_ = NULL;

VertexMessage* VertexMessage::New() const {
  return new VertexMessage;
}

void VertexMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VertexMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VertexMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VertexMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VertexMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VertexMessage)
  return false;
#undef DO_
}

void VertexMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VertexMessage)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VertexMessage)
}

::google::protobuf::uint8* VertexMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VertexMessage)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VertexMessage)
  return target;
}

int VertexMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VertexMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VertexMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VertexMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VertexMessage::MergeFrom(const VertexMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VertexMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VertexMessage::CopyFrom(const VertexMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VertexMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void VertexMessage::Swap(VertexMessage* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VertexMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VertexMessage_descriptor_;
  metadata.reflection = VertexMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GeometryMessage_DrawMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeometryMessage_DrawMode_descriptor_;
}
bool GeometryMessage_DrawMode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GeometryMessage_DrawMode GeometryMessage::Points;
const GeometryMessage_DrawMode GeometryMessage::Tris;
const GeometryMessage_DrawMode GeometryMessage::Quads;
const GeometryMessage_DrawMode GeometryMessage::Lines;
const GeometryMessage_DrawMode GeometryMessage::DrawMode_MIN;
const GeometryMessage_DrawMode GeometryMessage::DrawMode_MAX;
const int GeometryMessage::DrawMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GeometryMessage::kNumVerticesFieldNumber;
const int GeometryMessage::kNumIndicesFieldNumber;
const int GeometryMessage::kDrawModeFieldNumber;
const int GeometryMessage::kVerticesFieldNumber;
const int GeometryMessage::kIndicesFieldNumber;
#endif  // !_MSC_VER

GeometryMessage::GeometryMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GeometryMessage)
}

void GeometryMessage::InitAsDefaultInstance() {
}

GeometryMessage::GeometryMessage(const GeometryMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GeometryMessage)
}

void GeometryMessage::SharedCtor() {
  _cached_size_ = 0;
  numvertices_ = 0;
  numindices_ = 0;
  drawmode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeometryMessage::~GeometryMessage() {
  // @@protoc_insertion_point(destructor:GeometryMessage)
  SharedDtor();
}

void GeometryMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GeometryMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeometryMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeometryMessage_descriptor_;
}

const GeometryMessage& GeometryMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drawable_5froad_5fnet_2eproto();
  return *default_instance_;
}

GeometryMessage* GeometryMessage::default_instance_ = NULL;

GeometryMessage* GeometryMessage::New() const {
  return new GeometryMessage;
}

void GeometryMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GeometryMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(numvertices_, numindices_);
    drawmode_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  vertices_.Clear();
  indices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GeometryMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GeometryMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 numVertices = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numvertices_)));
          set_has_numvertices();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_numIndices;
        break;
      }

      // required int32 numIndices = 2;
      case 2: {
        if (tag == 16) {
         parse_numIndices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numindices_)));
          set_has_numindices();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_drawMode;
        break;
      }

      // required .GeometryMessage.DrawMode drawMode = 3;
      case 3: {
        if (tag == 24) {
         parse_drawMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GeometryMessage_DrawMode_IsValid(value)) {
            set_drawmode(static_cast< ::GeometryMessage_DrawMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vertices;
        break;
      }

      // repeated .VertexMessage vertices = 4;
      case 4: {
        if (tag == 34) {
         parse_vertices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vertices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vertices;
        if (input->ExpectTag(40)) goto parse_indices;
        break;
      }

      // repeated int32 indices = 5;
      case 5: {
        if (tag == 40) {
         parse_indices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_indices())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_indices())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_indices;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GeometryMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GeometryMessage)
  return false;
#undef DO_
}

void GeometryMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GeometryMessage)
  // required int32 numVertices = 1;
  if (has_numvertices()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->numvertices(), output);
  }

  // required int32 numIndices = 2;
  if (has_numindices()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->numindices(), output);
  }

  // required .GeometryMessage.DrawMode drawMode = 3;
  if (has_drawmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->drawmode(), output);
  }

  // repeated .VertexMessage vertices = 4;
  for (int i = 0; i < this->vertices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->vertices(i), output);
  }

  // repeated int32 indices = 5;
  for (int i = 0; i < this->indices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->indices(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GeometryMessage)
}

::google::protobuf::uint8* GeometryMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GeometryMessage)
  // required int32 numVertices = 1;
  if (has_numvertices()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->numvertices(), target);
  }

  // required int32 numIndices = 2;
  if (has_numindices()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->numindices(), target);
  }

  // required .GeometryMessage.DrawMode drawMode = 3;
  if (has_drawmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->drawmode(), target);
  }

  // repeated .VertexMessage vertices = 4;
  for (int i = 0; i < this->vertices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->vertices(i), target);
  }

  // repeated int32 indices = 5;
  for (int i = 0; i < this->indices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->indices(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GeometryMessage)
  return target;
}

int GeometryMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 numVertices = 1;
    if (has_numvertices()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numvertices());
    }

    // required int32 numIndices = 2;
    if (has_numindices()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numindices());
    }

    // required .GeometryMessage.DrawMode drawMode = 3;
    if (has_drawmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->drawmode());
    }

  }
  // repeated .VertexMessage vertices = 4;
  total_size += 1 * this->vertices_size();
  for (int i = 0; i < this->vertices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vertices(i));
  }

  // repeated int32 indices = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->indices_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->indices(i));
    }
    total_size += 1 * this->indices_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeometryMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GeometryMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GeometryMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GeometryMessage::MergeFrom(const GeometryMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  vertices_.MergeFrom(from.vertices_);
  indices_.MergeFrom(from.indices_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_numvertices()) {
      set_numvertices(from.numvertices());
    }
    if (from.has_numindices()) {
      set_numindices(from.numindices());
    }
    if (from.has_drawmode()) {
      set_drawmode(from.drawmode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GeometryMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeometryMessage::CopyFrom(const GeometryMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->vertices())) return false;
  return true;
}

void GeometryMessage::Swap(GeometryMessage* other) {
  if (other != this) {
    std::swap(numvertices_, other->numvertices_);
    std::swap(numindices_, other->numindices_);
    std::swap(drawmode_, other->drawmode_);
    vertices_.Swap(&other->vertices_);
    indices_.Swap(&other->indices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GeometryMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeometryMessage_descriptor_;
  metadata.reflection = GeometryMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SurfaceMessage::kGeometryFieldNumber;
#endif  // !_MSC_VER

SurfaceMessage::SurfaceMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SurfaceMessage)
}

void SurfaceMessage::InitAsDefaultInstance() {
  geometry_ = const_cast< ::GeometryMessage*>(&::GeometryMessage::default_instance());
}

SurfaceMessage::SurfaceMessage(const SurfaceMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SurfaceMessage)
}

void SurfaceMessage::SharedCtor() {
  _cached_size_ = 0;
  geometry_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SurfaceMessage::~SurfaceMessage() {
  // @@protoc_insertion_point(destructor:SurfaceMessage)
  SharedDtor();
}

void SurfaceMessage::SharedDtor() {
  if (this != default_instance_) {
    delete geometry_;
  }
}

void SurfaceMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SurfaceMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SurfaceMessage_descriptor_;
}

const SurfaceMessage& SurfaceMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drawable_5froad_5fnet_2eproto();
  return *default_instance_;
}

SurfaceMessage* SurfaceMessage::default_instance_ = NULL;

SurfaceMessage* SurfaceMessage::New() const {
  return new SurfaceMessage;
}

void SurfaceMessage::Clear() {
  if (has_geometry()) {
    if (geometry_ != NULL) geometry_->::GeometryMessage::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SurfaceMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SurfaceMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GeometryMessage geometry = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geometry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SurfaceMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SurfaceMessage)
  return false;
#undef DO_
}

void SurfaceMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SurfaceMessage)
  // required .GeometryMessage geometry = 1;
  if (has_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->geometry(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SurfaceMessage)
}

::google::protobuf::uint8* SurfaceMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SurfaceMessage)
  // required .GeometryMessage geometry = 1;
  if (has_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->geometry(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SurfaceMessage)
  return target;
}

int SurfaceMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GeometryMessage geometry = 1;
    if (has_geometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geometry());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SurfaceMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SurfaceMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SurfaceMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SurfaceMessage::MergeFrom(const SurfaceMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_geometry()) {
      mutable_geometry()->::GeometryMessage::MergeFrom(from.geometry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SurfaceMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SurfaceMessage::CopyFrom(const SurfaceMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurfaceMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_geometry()) {
    if (!this->geometry().IsInitialized()) return false;
  }
  return true;
}

void SurfaceMessage::Swap(SurfaceMessage* other) {
  if (other != this) {
    std::swap(geometry_, other->geometry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SurfaceMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SurfaceMessage_descriptor_;
  metadata.reflection = SurfaceMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoadClassMessage::kH0FieldNumber;
const int RoadClassMessage::kS0FieldNumber;
const int RoadClassMessage::kV0FieldNumber;
const int RoadClassMessage::kH1FieldNumber;
const int RoadClassMessage::kS1FieldNumber;
const int RoadClassMessage::kV1FieldNumber;
const int RoadClassMessage::kRoadClassFieldNumber;
const int RoadClassMessage::kLanesFieldNumber;
const int RoadClassMessage::kSurfaceFieldNumber;
#endif  // !_MSC_VER

RoadClassMessage::RoadClassMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoadClassMessage)
}

void RoadClassMessage::InitAsDefaultInstance() {
  surface_ = const_cast< ::SurfaceMessage*>(&::SurfaceMessage::default_instance());
}

RoadClassMessage::RoadClassMessage(const RoadClassMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RoadClassMessage)
}

void RoadClassMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  h0_ = 0;
  s0_ = 0;
  v0_ = 0;
  h1_ = 0;
  s1_ = 0;
  v1_ = 0;
  road_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lanes_ = 0;
  surface_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoadClassMessage::~RoadClassMessage() {
  // @@protoc_insertion_point(destructor:RoadClassMessage)
  SharedDtor();
}

void RoadClassMessage::SharedDtor() {
  if (road_class_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete road_class_;
  }
  if (this != default_instance_) {
    delete surface_;
  }
}

void RoadClassMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoadClassMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoadClassMessage_descriptor_;
}

const RoadClassMessage& RoadClassMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drawable_5froad_5fnet_2eproto();
  return *default_instance_;
}

RoadClassMessage* RoadClassMessage::default_instance_ = NULL;

RoadClassMessage* RoadClassMessage::New() const {
  return new RoadClassMessage;
}

void RoadClassMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RoadClassMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(h0_, v1_);
    if (has_road_class()) {
      if (road_class_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        road_class_->clear();
      }
    }
    lanes_ = 0;
  }
  if (has_surface()) {
    if (surface_ != NULL) surface_->::SurfaceMessage::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoadClassMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoadClassMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float h0 = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h0_)));
          set_has_h0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_s0;
        break;
      }

      // optional float s0 = 2;
      case 2: {
        if (tag == 21) {
         parse_s0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s0_)));
          set_has_s0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_v0;
        break;
      }

      // optional float v0 = 3;
      case 3: {
        if (tag == 29) {
         parse_v0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v0_)));
          set_has_v0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_h1;
        break;
      }

      // optional float h1 = 4;
      case 4: {
        if (tag == 37) {
         parse_h1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h1_)));
          set_has_h1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_s1;
        break;
      }

      // optional float s1 = 5;
      case 5: {
        if (tag == 45) {
         parse_s1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s1_)));
          set_has_s1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_v1;
        break;
      }

      // optional float v1 = 6;
      case 6: {
        if (tag == 53) {
         parse_v1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v1_)));
          set_has_v1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_road_class;
        break;
      }

      // optional string road_class = 7;
      case 7: {
        if (tag == 58) {
         parse_road_class:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_road_class()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->road_class().data(), this->road_class().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "road_class");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_lanes;
        break;
      }

      // optional int32 lanes = 8;
      case 8: {
        if (tag == 64) {
         parse_lanes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lanes_)));
          set_has_lanes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_surface;
        break;
      }

      // required .SurfaceMessage surface = 9;
      case 9: {
        if (tag == 74) {
         parse_surface:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_surface()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoadClassMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoadClassMessage)
  return false;
#undef DO_
}

void RoadClassMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoadClassMessage)
  // optional float h0 = 1;
  if (has_h0()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->h0(), output);
  }

  // optional float s0 = 2;
  if (has_s0()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->s0(), output);
  }

  // optional float v0 = 3;
  if (has_v0()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->v0(), output);
  }

  // optional float h1 = 4;
  if (has_h1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->h1(), output);
  }

  // optional float s1 = 5;
  if (has_s1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->s1(), output);
  }

  // optional float v1 = 6;
  if (has_v1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->v1(), output);
  }

  // optional string road_class = 7;
  if (has_road_class()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->road_class().data(), this->road_class().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "road_class");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->road_class(), output);
  }

  // optional int32 lanes = 8;
  if (has_lanes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lanes(), output);
  }

  // required .SurfaceMessage surface = 9;
  if (has_surface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->surface(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoadClassMessage)
}

::google::protobuf::uint8* RoadClassMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadClassMessage)
  // optional float h0 = 1;
  if (has_h0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->h0(), target);
  }

  // optional float s0 = 2;
  if (has_s0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->s0(), target);
  }

  // optional float v0 = 3;
  if (has_v0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->v0(), target);
  }

  // optional float h1 = 4;
  if (has_h1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->h1(), target);
  }

  // optional float s1 = 5;
  if (has_s1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->s1(), target);
  }

  // optional float v1 = 6;
  if (has_v1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->v1(), target);
  }

  // optional string road_class = 7;
  if (has_road_class()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->road_class().data(), this->road_class().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "road_class");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->road_class(), target);
  }

  // optional int32 lanes = 8;
  if (has_lanes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lanes(), target);
  }

  // required .SurfaceMessage surface = 9;
  if (has_surface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->surface(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadClassMessage)
  return target;
}

int RoadClassMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float h0 = 1;
    if (has_h0()) {
      total_size += 1 + 4;
    }

    // optional float s0 = 2;
    if (has_s0()) {
      total_size += 1 + 4;
    }

    // optional float v0 = 3;
    if (has_v0()) {
      total_size += 1 + 4;
    }

    // optional float h1 = 4;
    if (has_h1()) {
      total_size += 1 + 4;
    }

    // optional float s1 = 5;
    if (has_s1()) {
      total_size += 1 + 4;
    }

    // optional float v1 = 6;
    if (has_v1()) {
      total_size += 1 + 4;
    }

    // optional string road_class = 7;
    if (has_road_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->road_class());
    }

    // optional int32 lanes = 8;
    if (has_lanes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lanes());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .SurfaceMessage surface = 9;
    if (has_surface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->surface());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoadClassMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoadClassMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoadClassMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoadClassMessage::MergeFrom(const RoadClassMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_h0()) {
      set_h0(from.h0());
    }
    if (from.has_s0()) {
      set_s0(from.s0());
    }
    if (from.has_v0()) {
      set_v0(from.v0());
    }
    if (from.has_h1()) {
      set_h1(from.h1());
    }
    if (from.has_s1()) {
      set_s1(from.s1());
    }
    if (from.has_v1()) {
      set_v1(from.v1());
    }
    if (from.has_road_class()) {
      set_road_class(from.road_class());
    }
    if (from.has_lanes()) {
      set_lanes(from.lanes());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_surface()) {
      mutable_surface()->::SurfaceMessage::MergeFrom(from.surface());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoadClassMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadClassMessage::CopyFrom(const RoadClassMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadClassMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000100) != 0x00000100) return false;

  if (has_surface()) {
    if (!this->surface().IsInitialized()) return false;
  }
  return true;
}

void RoadClassMessage::Swap(RoadClassMessage* other) {
  if (other != this) {
    std::swap(h0_, other->h0_);
    std::swap(s0_, other->s0_);
    std::swap(v0_, other->v0_);
    std::swap(h1_, other->h1_);
    std::swap(s1_, other->s1_);
    std::swap(v1_, other->v1_);
    std::swap(road_class_, other->road_class_);
    std::swap(lanes_, other->lanes_);
    std::swap(surface_, other->surface_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoadClassMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoadClassMessage_descriptor_;
  metadata.reflection = RoadClassMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoadClassTupleMessage::kRoadClassNameFieldNumber;
const int RoadClassTupleMessage::kRoadClassFieldNumber;
#endif  // !_MSC_VER

RoadClassTupleMessage::RoadClassTupleMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoadClassTupleMessage)
}

void RoadClassTupleMessage::InitAsDefaultInstance() {
  road_class_ = const_cast< ::RoadClassMessage*>(&::RoadClassMessage::default_instance());
}

RoadClassTupleMessage::RoadClassTupleMessage(const RoadClassTupleMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RoadClassTupleMessage)
}

void RoadClassTupleMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  road_class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  road_class_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoadClassTupleMessage::~RoadClassTupleMessage() {
  // @@protoc_insertion_point(destructor:RoadClassTupleMessage)
  SharedDtor();
}

void RoadClassTupleMessage::SharedDtor() {
  if (road_class_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete road_class_name_;
  }
  if (this != default_instance_) {
    delete road_class_;
  }
}

void RoadClassTupleMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoadClassTupleMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoadClassTupleMessage_descriptor_;
}

const RoadClassTupleMessage& RoadClassTupleMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drawable_5froad_5fnet_2eproto();
  return *default_instance_;
}

RoadClassTupleMessage* RoadClassTupleMessage::default_instance_ = NULL;

RoadClassTupleMessage* RoadClassTupleMessage::New() const {
  return new RoadClassTupleMessage;
}

void RoadClassTupleMessage::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_road_class_name()) {
      if (road_class_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        road_class_name_->clear();
      }
    }
    if (has_road_class()) {
      if (road_class_ != NULL) road_class_->::RoadClassMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoadClassTupleMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoadClassTupleMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string road_class_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_road_class_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->road_class_name().data(), this->road_class_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "road_class_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_road_class;
        break;
      }

      // required .RoadClassMessage road_class = 2;
      case 2: {
        if (tag == 18) {
         parse_road_class:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_road_class()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoadClassTupleMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoadClassTupleMessage)
  return false;
#undef DO_
}

void RoadClassTupleMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoadClassTupleMessage)
  // required string road_class_name = 1;
  if (has_road_class_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->road_class_name().data(), this->road_class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "road_class_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->road_class_name(), output);
  }

  // required .RoadClassMessage road_class = 2;
  if (has_road_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->road_class(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoadClassTupleMessage)
}

::google::protobuf::uint8* RoadClassTupleMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadClassTupleMessage)
  // required string road_class_name = 1;
  if (has_road_class_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->road_class_name().data(), this->road_class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "road_class_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->road_class_name(), target);
  }

  // required .RoadClassMessage road_class = 2;
  if (has_road_class()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->road_class(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadClassTupleMessage)
  return target;
}

int RoadClassTupleMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string road_class_name = 1;
    if (has_road_class_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->road_class_name());
    }

    // required .RoadClassMessage road_class = 2;
    if (has_road_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->road_class());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoadClassTupleMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoadClassTupleMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoadClassTupleMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoadClassTupleMessage::MergeFrom(const RoadClassTupleMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_road_class_name()) {
      set_road_class_name(from.road_class_name());
    }
    if (from.has_road_class()) {
      mutable_road_class()->::RoadClassMessage::MergeFrom(from.road_class());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoadClassTupleMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadClassTupleMessage::CopyFrom(const RoadClassTupleMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadClassTupleMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_road_class()) {
    if (!this->road_class().IsInitialized()) return false;
  }
  return true;
}

void RoadClassTupleMessage::Swap(RoadClassTupleMessage* other) {
  if (other != this) {
    std::swap(road_class_name_, other->road_class_name_);
    std::swap(road_class_, other->road_class_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoadClassTupleMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoadClassTupleMessage_descriptor_;
  metadata.reflection = RoadClassTupleMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SumoRoadNetworkMessage::kTuplesFieldNumber;
const int SumoRoadNetworkMessage::kOffsetXFieldNumber;
const int SumoRoadNetworkMessage::kOffsetYFieldNumber;
#endif  // !_MSC_VER

SumoRoadNetworkMessage::SumoRoadNetworkMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SumoRoadNetworkMessage)
}

void SumoRoadNetworkMessage::InitAsDefaultInstance() {
}

SumoRoadNetworkMessage::SumoRoadNetworkMessage(const SumoRoadNetworkMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SumoRoadNetworkMessage)
}

void SumoRoadNetworkMessage::SharedCtor() {
  _cached_size_ = 0;
  offset_x_ = 0;
  offset_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SumoRoadNetworkMessage::~SumoRoadNetworkMessage() {
  // @@protoc_insertion_point(destructor:SumoRoadNetworkMessage)
  SharedDtor();
}

void SumoRoadNetworkMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SumoRoadNetworkMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SumoRoadNetworkMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SumoRoadNetworkMessage_descriptor_;
}

const SumoRoadNetworkMessage& SumoRoadNetworkMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drawable_5froad_5fnet_2eproto();
  return *default_instance_;
}

SumoRoadNetworkMessage* SumoRoadNetworkMessage::default_instance_ = NULL;

SumoRoadNetworkMessage* SumoRoadNetworkMessage::New() const {
  return new SumoRoadNetworkMessage;
}

void SumoRoadNetworkMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SumoRoadNetworkMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_x_, offset_y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  tuples_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SumoRoadNetworkMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SumoRoadNetworkMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RoadClassTupleMessage tuples = 1;
      case 1: {
        if (tag == 10) {
         parse_tuples:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tuples()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_tuples;
        if (input->ExpectTag(21)) goto parse_offset_x;
        break;
      }

      // required float offset_x = 2;
      case 2: {
        if (tag == 21) {
         parse_offset_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_x_)));
          set_has_offset_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_offset_y;
        break;
      }

      // required float offset_y = 3;
      case 3: {
        if (tag == 29) {
         parse_offset_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_y_)));
          set_has_offset_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SumoRoadNetworkMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SumoRoadNetworkMessage)
  return false;
#undef DO_
}

void SumoRoadNetworkMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SumoRoadNetworkMessage)
  // repeated .RoadClassTupleMessage tuples = 1;
  for (int i = 0; i < this->tuples_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tuples(i), output);
  }

  // required float offset_x = 2;
  if (has_offset_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->offset_x(), output);
  }

  // required float offset_y = 3;
  if (has_offset_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->offset_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SumoRoadNetworkMessage)
}

::google::protobuf::uint8* SumoRoadNetworkMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SumoRoadNetworkMessage)
  // repeated .RoadClassTupleMessage tuples = 1;
  for (int i = 0; i < this->tuples_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tuples(i), target);
  }

  // required float offset_x = 2;
  if (has_offset_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->offset_x(), target);
  }

  // required float offset_y = 3;
  if (has_offset_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->offset_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SumoRoadNetworkMessage)
  return target;
}

int SumoRoadNetworkMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required float offset_x = 2;
    if (has_offset_x()) {
      total_size += 1 + 4;
    }

    // required float offset_y = 3;
    if (has_offset_y()) {
      total_size += 1 + 4;
    }

  }
  // repeated .RoadClassTupleMessage tuples = 1;
  total_size += 1 * this->tuples_size();
  for (int i = 0; i < this->tuples_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tuples(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SumoRoadNetworkMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SumoRoadNetworkMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SumoRoadNetworkMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SumoRoadNetworkMessage::MergeFrom(const SumoRoadNetworkMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  tuples_.MergeFrom(from.tuples_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_offset_x()) {
      set_offset_x(from.offset_x());
    }
    if (from.has_offset_y()) {
      set_offset_y(from.offset_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SumoRoadNetworkMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SumoRoadNetworkMessage::CopyFrom(const SumoRoadNetworkMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SumoRoadNetworkMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->tuples())) return false;
  return true;
}

void SumoRoadNetworkMessage::Swap(SumoRoadNetworkMessage* other) {
  if (other != this) {
    tuples_.Swap(&other->tuples_);
    std::swap(offset_x_, other->offset_x_);
    std::swap(offset_y_, other->offset_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SumoRoadNetworkMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SumoRoadNetworkMessage_descriptor_;
  metadata.reflection = SumoRoadNetworkMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
