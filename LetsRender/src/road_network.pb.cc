// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: road_network.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "road_network.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PointMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoadMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoadMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoadTupleMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoadTupleMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoadNetworkMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoadNetworkMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_road_5fnetwork_2eproto() {
  protobuf_AddDesc_road_5fnetwork_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "road_network.proto");
  GOOGLE_CHECK(file != NULL);
  PointMessage_descriptor_ = file->message_type(0);
  static const int PointMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointMessage, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointMessage, y_),
  };
  PointMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointMessage_descriptor_,
      PointMessage::default_instance_,
      PointMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointMessage));
  RoadMessage_descriptor_ = file->message_type(1);
  static const int RoadMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadMessage, lane_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadMessage, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadMessage, geometry_),
  };
  RoadMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoadMessage_descriptor_,
      RoadMessage::default_instance_,
      RoadMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoadMessage));
  RoadTupleMessage_descriptor_ = file->message_type(2);
  static const int RoadTupleMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadTupleMessage, road_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadTupleMessage, road_),
  };
  RoadTupleMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoadTupleMessage_descriptor_,
      RoadTupleMessage::default_instance_,
      RoadTupleMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadTupleMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadTupleMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoadTupleMessage));
  RoadNetworkMessage_descriptor_ = file->message_type(3);
  static const int RoadNetworkMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadNetworkMessage, id_and_road_),
  };
  RoadNetworkMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoadNetworkMessage_descriptor_,
      RoadNetworkMessage::default_instance_,
      RoadNetworkMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadNetworkMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadNetworkMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoadNetworkMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_road_5fnetwork_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointMessage_descriptor_, &PointMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoadMessage_descriptor_, &RoadMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoadTupleMessage_descriptor_, &RoadTupleMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoadNetworkMessage_descriptor_, &RoadNetworkMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_road_5fnetwork_2eproto() {
  delete PointMessage::default_instance_;
  delete PointMessage_reflection_;
  delete RoadMessage::default_instance_;
  delete RoadMessage_reflection_;
  delete RoadTupleMessage::default_instance_;
  delete RoadTupleMessage_reflection_;
  delete RoadNetworkMessage::default_instance_;
  delete RoadNetworkMessage_reflection_;
}

void protobuf_AddDesc_road_5fnetwork_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022road_network.proto\"$\n\014PointMessage\022\t\n\001"
    "x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\"`\n\013RoadMessage\022\014\n\004typ"
    "e\030\001 \002(\t\022\022\n\nlane_count\030\002 \001(\005\022\016\n\006length\030\003 "
    "\001(\002\022\037\n\010geometry\030\004 \003(\0132\r.PointMessage\"B\n\020"
    "RoadTupleMessage\022\022\n\nroad_index\030\001 \002(\005\022\032\n\004"
    "road\030\002 \002(\0132\014.RoadMessage\"<\n\022RoadNetworkM"
    "essage\022&\n\013id_and_road\030\001 \003(\0132\021.RoadTupleM"
    "essage", 286);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "road_network.proto", &protobuf_RegisterTypes);
  PointMessage::default_instance_ = new PointMessage();
  RoadMessage::default_instance_ = new RoadMessage();
  RoadTupleMessage::default_instance_ = new RoadTupleMessage();
  RoadNetworkMessage::default_instance_ = new RoadNetworkMessage();
  PointMessage::default_instance_->InitAsDefaultInstance();
  RoadMessage::default_instance_->InitAsDefaultInstance();
  RoadTupleMessage::default_instance_->InitAsDefaultInstance();
  RoadNetworkMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_road_5fnetwork_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_road_5fnetwork_2eproto {
  StaticDescriptorInitializer_road_5fnetwork_2eproto() {
    protobuf_AddDesc_road_5fnetwork_2eproto();
  }
} static_descriptor_initializer_road_5fnetwork_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PointMessage::kXFieldNumber;
const int PointMessage::kYFieldNumber;
#endif  // !_MSC_VER

PointMessage::PointMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PointMessage)
}

void PointMessage::InitAsDefaultInstance() {
}

PointMessage::PointMessage(const PointMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PointMessage)
}

void PointMessage::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointMessage::~PointMessage() {
  // @@protoc_insertion_point(destructor:PointMessage)
  SharedDtor();
}

void PointMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointMessage_descriptor_;
}

const PointMessage& PointMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_road_5fnetwork_2eproto();
  return *default_instance_;
}

PointMessage* PointMessage::default_instance_ = NULL;

PointMessage* PointMessage::New() const {
  return new PointMessage;
}

void PointMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PointMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PointMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PointMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PointMessage)
  return false;
#undef DO_
}

void PointMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PointMessage)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PointMessage)
}

::google::protobuf::uint8* PointMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PointMessage)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PointMessage)
  return target;
}

int PointMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointMessage::MergeFrom(const PointMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointMessage::CopyFrom(const PointMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PointMessage::Swap(PointMessage* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointMessage_descriptor_;
  metadata.reflection = PointMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoadMessage::kTypeFieldNumber;
const int RoadMessage::kLaneCountFieldNumber;
const int RoadMessage::kLengthFieldNumber;
const int RoadMessage::kGeometryFieldNumber;
#endif  // !_MSC_VER

RoadMessage::RoadMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoadMessage)
}

void RoadMessage::InitAsDefaultInstance() {
}

RoadMessage::RoadMessage(const RoadMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RoadMessage)
}

void RoadMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lane_count_ = 0;
  length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoadMessage::~RoadMessage() {
  // @@protoc_insertion_point(destructor:RoadMessage)
  SharedDtor();
}

void RoadMessage::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void RoadMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoadMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoadMessage_descriptor_;
}

const RoadMessage& RoadMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_road_5fnetwork_2eproto();
  return *default_instance_;
}

RoadMessage* RoadMessage::default_instance_ = NULL;

RoadMessage* RoadMessage::New() const {
  return new RoadMessage;
}

void RoadMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RoadMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(lane_count_, length_);
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  geometry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoadMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoadMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lane_count;
        break;
      }

      // optional int32 lane_count = 2;
      case 2: {
        if (tag == 16) {
         parse_lane_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_count_)));
          set_has_lane_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_length;
        break;
      }

      // optional float length = 3;
      case 3: {
        if (tag == 29) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_geometry;
        break;
      }

      // repeated .PointMessage geometry = 4;
      case 4: {
        if (tag == 34) {
         parse_geometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_geometry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_geometry;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoadMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoadMessage)
  return false;
#undef DO_
}

void RoadMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoadMessage)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional int32 lane_count = 2;
  if (has_lane_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lane_count(), output);
  }

  // optional float length = 3;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->length(), output);
  }

  // repeated .PointMessage geometry = 4;
  for (int i = 0; i < this->geometry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->geometry(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoadMessage)
}

::google::protobuf::uint8* RoadMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadMessage)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional int32 lane_count = 2;
  if (has_lane_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lane_count(), target);
  }

  // optional float length = 3;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->length(), target);
  }

  // repeated .PointMessage geometry = 4;
  for (int i = 0; i < this->geometry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->geometry(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadMessage)
  return target;
}

int RoadMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional int32 lane_count = 2;
    if (has_lane_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lane_count());
    }

    // optional float length = 3;
    if (has_length()) {
      total_size += 1 + 4;
    }

  }
  // repeated .PointMessage geometry = 4;
  total_size += 1 * this->geometry_size();
  for (int i = 0; i < this->geometry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->geometry(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoadMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoadMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoadMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoadMessage::MergeFrom(const RoadMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  geometry_.MergeFrom(from.geometry_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_lane_count()) {
      set_lane_count(from.lane_count());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoadMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadMessage::CopyFrom(const RoadMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->geometry())) return false;
  return true;
}

void RoadMessage::Swap(RoadMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(lane_count_, other->lane_count_);
    std::swap(length_, other->length_);
    geometry_.Swap(&other->geometry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoadMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoadMessage_descriptor_;
  metadata.reflection = RoadMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoadTupleMessage::kRoadIndexFieldNumber;
const int RoadTupleMessage::kRoadFieldNumber;
#endif  // !_MSC_VER

RoadTupleMessage::RoadTupleMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoadTupleMessage)
}

void RoadTupleMessage::InitAsDefaultInstance() {
  road_ = const_cast< ::RoadMessage*>(&::RoadMessage::default_instance());
}

RoadTupleMessage::RoadTupleMessage(const RoadTupleMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RoadTupleMessage)
}

void RoadTupleMessage::SharedCtor() {
  _cached_size_ = 0;
  road_index_ = 0;
  road_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoadTupleMessage::~RoadTupleMessage() {
  // @@protoc_insertion_point(destructor:RoadTupleMessage)
  SharedDtor();
}

void RoadTupleMessage::SharedDtor() {
  if (this != default_instance_) {
    delete road_;
  }
}

void RoadTupleMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoadTupleMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoadTupleMessage_descriptor_;
}

const RoadTupleMessage& RoadTupleMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_road_5fnetwork_2eproto();
  return *default_instance_;
}

RoadTupleMessage* RoadTupleMessage::default_instance_ = NULL;

RoadTupleMessage* RoadTupleMessage::New() const {
  return new RoadTupleMessage;
}

void RoadTupleMessage::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    road_index_ = 0;
    if (has_road()) {
      if (road_ != NULL) road_->::RoadMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoadTupleMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoadTupleMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 road_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &road_index_)));
          set_has_road_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_road;
        break;
      }

      // required .RoadMessage road = 2;
      case 2: {
        if (tag == 18) {
         parse_road:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_road()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoadTupleMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoadTupleMessage)
  return false;
#undef DO_
}

void RoadTupleMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoadTupleMessage)
  // required int32 road_index = 1;
  if (has_road_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->road_index(), output);
  }

  // required .RoadMessage road = 2;
  if (has_road()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->road(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoadTupleMessage)
}

::google::protobuf::uint8* RoadTupleMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadTupleMessage)
  // required int32 road_index = 1;
  if (has_road_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->road_index(), target);
  }

  // required .RoadMessage road = 2;
  if (has_road()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->road(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadTupleMessage)
  return target;
}

int RoadTupleMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 road_index = 1;
    if (has_road_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->road_index());
    }

    // required .RoadMessage road = 2;
    if (has_road()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->road());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoadTupleMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoadTupleMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoadTupleMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoadTupleMessage::MergeFrom(const RoadTupleMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_road_index()) {
      set_road_index(from.road_index());
    }
    if (from.has_road()) {
      mutable_road()->::RoadMessage::MergeFrom(from.road());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoadTupleMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadTupleMessage::CopyFrom(const RoadTupleMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadTupleMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_road()) {
    if (!this->road().IsInitialized()) return false;
  }
  return true;
}

void RoadTupleMessage::Swap(RoadTupleMessage* other) {
  if (other != this) {
    std::swap(road_index_, other->road_index_);
    std::swap(road_, other->road_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoadTupleMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoadTupleMessage_descriptor_;
  metadata.reflection = RoadTupleMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoadNetworkMessage::kIdAndRoadFieldNumber;
#endif  // !_MSC_VER

RoadNetworkMessage::RoadNetworkMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoadNetworkMessage)
}

void RoadNetworkMessage::InitAsDefaultInstance() {
}

RoadNetworkMessage::RoadNetworkMessage(const RoadNetworkMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RoadNetworkMessage)
}

void RoadNetworkMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoadNetworkMessage::~RoadNetworkMessage() {
  // @@protoc_insertion_point(destructor:RoadNetworkMessage)
  SharedDtor();
}

void RoadNetworkMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoadNetworkMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoadNetworkMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoadNetworkMessage_descriptor_;
}

const RoadNetworkMessage& RoadNetworkMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_road_5fnetwork_2eproto();
  return *default_instance_;
}

RoadNetworkMessage* RoadNetworkMessage::default_instance_ = NULL;

RoadNetworkMessage* RoadNetworkMessage::New() const {
  return new RoadNetworkMessage;
}

void RoadNetworkMessage::Clear() {
  id_and_road_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoadNetworkMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoadNetworkMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RoadTupleMessage id_and_road = 1;
      case 1: {
        if (tag == 10) {
         parse_id_and_road:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_id_and_road()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_id_and_road;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoadNetworkMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoadNetworkMessage)
  return false;
#undef DO_
}

void RoadNetworkMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoadNetworkMessage)
  // repeated .RoadTupleMessage id_and_road = 1;
  for (int i = 0; i < this->id_and_road_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id_and_road(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoadNetworkMessage)
}

::google::protobuf::uint8* RoadNetworkMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadNetworkMessage)
  // repeated .RoadTupleMessage id_and_road = 1;
  for (int i = 0; i < this->id_and_road_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id_and_road(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadNetworkMessage)
  return target;
}

int RoadNetworkMessage::ByteSize() const {
  int total_size = 0;

  // repeated .RoadTupleMessage id_and_road = 1;
  total_size += 1 * this->id_and_road_size();
  for (int i = 0; i < this->id_and_road_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->id_and_road(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoadNetworkMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoadNetworkMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoadNetworkMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoadNetworkMessage::MergeFrom(const RoadNetworkMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_and_road_.MergeFrom(from.id_and_road_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoadNetworkMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadNetworkMessage::CopyFrom(const RoadNetworkMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadNetworkMessage::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->id_and_road())) return false;
  return true;
}

void RoadNetworkMessage::Swap(RoadNetworkMessage* other) {
  if (other != this) {
    id_and_road_.Swap(&other->id_and_road_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoadNetworkMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoadNetworkMessage_descriptor_;
  metadata.reflection = RoadNetworkMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
