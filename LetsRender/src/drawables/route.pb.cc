// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: route.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "route.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TrafficRouting {

namespace {

const ::google::protobuf::Descriptor* NormalDistribution_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NormalDistribution_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoadMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoadMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* UtilPathElement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UtilPathElement_reflection_ = NULL;
const ::google::protobuf::Descriptor* Route_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Route_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_route_2eproto() {
  protobuf_AddDesc_route_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "route.proto");
  GOOGLE_CHECK(file != NULL);
  NormalDistribution_descriptor_ = file->message_type(0);
  static const int NormalDistribution_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalDistribution, mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalDistribution, standard_deviation_),
  };
  NormalDistribution_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NormalDistribution_descriptor_,
      NormalDistribution::default_instance_,
      NormalDistribution_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalDistribution, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalDistribution, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NormalDistribution));
  PointMessage_descriptor_ = file->message_type(1);
  static const int PointMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointMessage, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointMessage, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointMessage, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointMessage, latitude_),
  };
  PointMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointMessage_descriptor_,
      PointMessage::default_instance_,
      PointMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointMessage));
  RoadMessage_descriptor_ = file->message_type(2);
  static const int RoadMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadMessage, osm_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadMessage, road_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadMessage, geometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadMessage, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadMessage, lane_count_),
  };
  RoadMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoadMessage_descriptor_,
      RoadMessage::default_instance_,
      RoadMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoadMessage));
  UtilPathElement_descriptor_ = file->message_type(3);
  static const int UtilPathElement_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UtilPathElement, depart_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UtilPathElement, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UtilPathElement, road_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UtilPathElement, arrival_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UtilPathElement, departure_time_),
  };
  UtilPathElement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UtilPathElement_descriptor_,
      UtilPathElement::default_instance_,
      UtilPathElement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UtilPathElement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UtilPathElement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UtilPathElement));
  Route_descriptor_ = file->message_type(4);
  static const int Route_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, path_element_),
  };
  Route_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Route_descriptor_,
      Route::default_instance_,
      Route_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Route));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_route_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NormalDistribution_descriptor_, &NormalDistribution::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointMessage_descriptor_, &PointMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoadMessage_descriptor_, &RoadMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UtilPathElement_descriptor_, &UtilPathElement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Route_descriptor_, &Route::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_route_2eproto() {
  delete NormalDistribution::default_instance_;
  delete NormalDistribution_reflection_;
  delete PointMessage::default_instance_;
  delete PointMessage_reflection_;
  delete RoadMessage::default_instance_;
  delete RoadMessage_reflection_;
  delete UtilPathElement::default_instance_;
  delete UtilPathElement_reflection_;
  delete Route::default_instance_;
  delete Route_reflection_;
}

void protobuf_AddDesc_route_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013route.proto\022\016TrafficRouting\">\n\022NormalD"
    "istribution\022\014\n\004mean\030\001 \002(\001\022\032\n\022standard_de"
    "viation\030\002 \002(\001\"I\n\014PointMessage\022\t\n\001x\030\001 \002(\002"
    "\022\t\n\001y\030\002 \002(\002\022\021\n\tlongitude\030\003 \001(\002\022\020\n\010latitu"
    "de\030\004 \001(\002\"\222\001\n\013RoadMessage\022\016\n\006osm_id\030\001 \002(\005"
    "\022\021\n\troad_name\030\002 \002(\t\022\014\n\004type\030\003 \002(\t\022.\n\010geo"
    "metry\030\004 \003(\0132\034.TrafficRouting.PointMessag"
    "e\022\016\n\006length\030\005 \001(\002\022\022\n\nlane_count\030\006 \001(\005\"\323\001"
    "\n\017UtilPathElement\022\023\n\013depart_time\030\001 \001(\002\022\n"
    "\n\002id\030\002 \002(\005\022)\n\004road\030\003 \002(\0132\033.TrafficRoutin"
    "g.RoadMessage\0228\n\014arrival_time\030\004 \002(\0132\".Tr"
    "afficRouting.NormalDistribution\022:\n\016depar"
    "ture_time\030\005 \002(\0132\".TrafficRouting.NormalD"
    "istribution\">\n\005Route\0225\n\014path_element\030\001 \003"
    "(\0132\037.TrafficRouting.UtilPathElement", 595);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "route.proto", &protobuf_RegisterTypes);
  NormalDistribution::default_instance_ = new NormalDistribution();
  PointMessage::default_instance_ = new PointMessage();
  RoadMessage::default_instance_ = new RoadMessage();
  UtilPathElement::default_instance_ = new UtilPathElement();
  Route::default_instance_ = new Route();
  NormalDistribution::default_instance_->InitAsDefaultInstance();
  PointMessage::default_instance_->InitAsDefaultInstance();
  RoadMessage::default_instance_->InitAsDefaultInstance();
  UtilPathElement::default_instance_->InitAsDefaultInstance();
  Route::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_route_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_route_2eproto {
  StaticDescriptorInitializer_route_2eproto() {
    protobuf_AddDesc_route_2eproto();
  }
} static_descriptor_initializer_route_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NormalDistribution::kMeanFieldNumber;
const int NormalDistribution::kStandardDeviationFieldNumber;
#endif  // !_MSC_VER

NormalDistribution::NormalDistribution()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TrafficRouting.NormalDistribution)
}

void NormalDistribution::InitAsDefaultInstance() {
}

NormalDistribution::NormalDistribution(const NormalDistribution& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TrafficRouting.NormalDistribution)
}

void NormalDistribution::SharedCtor() {
  _cached_size_ = 0;
  mean_ = 0;
  standard_deviation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NormalDistribution::~NormalDistribution() {
  // @@protoc_insertion_point(destructor:TrafficRouting.NormalDistribution)
  SharedDtor();
}

void NormalDistribution::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NormalDistribution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NormalDistribution::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NormalDistribution_descriptor_;
}

const NormalDistribution& NormalDistribution::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_route_2eproto();
  return *default_instance_;
}

NormalDistribution* NormalDistribution::default_instance_ = NULL;

NormalDistribution* NormalDistribution::New() const {
  return new NormalDistribution;
}

void NormalDistribution::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NormalDistribution*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mean_, standard_deviation_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NormalDistribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TrafficRouting.NormalDistribution)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double mean = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mean_)));
          set_has_mean();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_standard_deviation;
        break;
      }

      // required double standard_deviation = 2;
      case 2: {
        if (tag == 17) {
         parse_standard_deviation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &standard_deviation_)));
          set_has_standard_deviation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TrafficRouting.NormalDistribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TrafficRouting.NormalDistribution)
  return false;
#undef DO_
}

void NormalDistribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TrafficRouting.NormalDistribution)
  // required double mean = 1;
  if (has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->mean(), output);
  }

  // required double standard_deviation = 2;
  if (has_standard_deviation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->standard_deviation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TrafficRouting.NormalDistribution)
}

::google::protobuf::uint8* NormalDistribution::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TrafficRouting.NormalDistribution)
  // required double mean = 1;
  if (has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->mean(), target);
  }

  // required double standard_deviation = 2;
  if (has_standard_deviation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->standard_deviation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrafficRouting.NormalDistribution)
  return target;
}

int NormalDistribution::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double mean = 1;
    if (has_mean()) {
      total_size += 1 + 8;
    }

    // required double standard_deviation = 2;
    if (has_standard_deviation()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NormalDistribution::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NormalDistribution* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NormalDistribution*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NormalDistribution::MergeFrom(const NormalDistribution& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mean()) {
      set_mean(from.mean());
    }
    if (from.has_standard_deviation()) {
      set_standard_deviation(from.standard_deviation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NormalDistribution::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalDistribution::CopyFrom(const NormalDistribution& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalDistribution::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NormalDistribution::Swap(NormalDistribution* other) {
  if (other != this) {
    std::swap(mean_, other->mean_);
    std::swap(standard_deviation_, other->standard_deviation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NormalDistribution::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NormalDistribution_descriptor_;
  metadata.reflection = NormalDistribution_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PointMessage::kXFieldNumber;
const int PointMessage::kYFieldNumber;
const int PointMessage::kLongitudeFieldNumber;
const int PointMessage::kLatitudeFieldNumber;
#endif  // !_MSC_VER

PointMessage::PointMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TrafficRouting.PointMessage)
}

void PointMessage::InitAsDefaultInstance() {
}

PointMessage::PointMessage(const PointMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TrafficRouting.PointMessage)
}

void PointMessage::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  longitude_ = 0;
  latitude_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointMessage::~PointMessage() {
  // @@protoc_insertion_point(destructor:TrafficRouting.PointMessage)
  SharedDtor();
}

void PointMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointMessage_descriptor_;
}

const PointMessage& PointMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_route_2eproto();
  return *default_instance_;
}

PointMessage* PointMessage::default_instance_ = NULL;

PointMessage* PointMessage::New() const {
  return new PointMessage;
}

void PointMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PointMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, latitude_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TrafficRouting.PointMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_longitude;
        break;
      }

      // optional float longitude = 3;
      case 3: {
        if (tag == 29) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_latitude;
        break;
      }

      // optional float latitude = 4;
      case 4: {
        if (tag == 37) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TrafficRouting.PointMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TrafficRouting.PointMessage)
  return false;
#undef DO_
}

void PointMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TrafficRouting.PointMessage)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float longitude = 3;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->longitude(), output);
  }

  // optional float latitude = 4;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->latitude(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TrafficRouting.PointMessage)
}

::google::protobuf::uint8* PointMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TrafficRouting.PointMessage)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float longitude = 3;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->longitude(), target);
  }

  // optional float latitude = 4;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->latitude(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrafficRouting.PointMessage)
  return target;
}

int PointMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float longitude = 3;
    if (has_longitude()) {
      total_size += 1 + 4;
    }

    // optional float latitude = 4;
    if (has_latitude()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointMessage::MergeFrom(const PointMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointMessage::CopyFrom(const PointMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PointMessage::Swap(PointMessage* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(longitude_, other->longitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointMessage_descriptor_;
  metadata.reflection = PointMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoadMessage::kOsmIdFieldNumber;
const int RoadMessage::kRoadNameFieldNumber;
const int RoadMessage::kTypeFieldNumber;
const int RoadMessage::kGeometryFieldNumber;
const int RoadMessage::kLengthFieldNumber;
const int RoadMessage::kLaneCountFieldNumber;
#endif  // !_MSC_VER

RoadMessage::RoadMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TrafficRouting.RoadMessage)
}

void RoadMessage::InitAsDefaultInstance() {
}

RoadMessage::RoadMessage(const RoadMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TrafficRouting.RoadMessage)
}

void RoadMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  osm_id_ = 0;
  road_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  length_ = 0;
  lane_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoadMessage::~RoadMessage() {
  // @@protoc_insertion_point(destructor:TrafficRouting.RoadMessage)
  SharedDtor();
}

void RoadMessage::SharedDtor() {
  if (road_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete road_name_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void RoadMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoadMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoadMessage_descriptor_;
}

const RoadMessage& RoadMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_route_2eproto();
  return *default_instance_;
}

RoadMessage* RoadMessage::default_instance_ = NULL;

RoadMessage* RoadMessage::New() const {
  return new RoadMessage;
}

void RoadMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RoadMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 55) {
    ZR_(osm_id_, length_);
    if (has_road_name()) {
      if (road_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        road_name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    lane_count_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  geometry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoadMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TrafficRouting.RoadMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 osm_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &osm_id_)));
          set_has_osm_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_road_name;
        break;
      }

      // required string road_name = 2;
      case 2: {
        if (tag == 18) {
         parse_road_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_road_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->road_name().data(), this->road_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "road_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // required string type = 3;
      case 3: {
        if (tag == 26) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_geometry;
        break;
      }

      // repeated .TrafficRouting.PointMessage geometry = 4;
      case 4: {
        if (tag == 34) {
         parse_geometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_geometry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_geometry;
        if (input->ExpectTag(45)) goto parse_length;
        break;
      }

      // optional float length = 5;
      case 5: {
        if (tag == 45) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_lane_count;
        break;
      }

      // optional int32 lane_count = 6;
      case 6: {
        if (tag == 48) {
         parse_lane_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_count_)));
          set_has_lane_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TrafficRouting.RoadMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TrafficRouting.RoadMessage)
  return false;
#undef DO_
}

void RoadMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TrafficRouting.RoadMessage)
  // required int32 osm_id = 1;
  if (has_osm_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->osm_id(), output);
  }

  // required string road_name = 2;
  if (has_road_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->road_name().data(), this->road_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "road_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->road_name(), output);
  }

  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  // repeated .TrafficRouting.PointMessage geometry = 4;
  for (int i = 0; i < this->geometry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->geometry(i), output);
  }

  // optional float length = 5;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->length(), output);
  }

  // optional int32 lane_count = 6;
  if (has_lane_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lane_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TrafficRouting.RoadMessage)
}

::google::protobuf::uint8* RoadMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TrafficRouting.RoadMessage)
  // required int32 osm_id = 1;
  if (has_osm_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->osm_id(), target);
  }

  // required string road_name = 2;
  if (has_road_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->road_name().data(), this->road_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "road_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->road_name(), target);
  }

  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // repeated .TrafficRouting.PointMessage geometry = 4;
  for (int i = 0; i < this->geometry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->geometry(i), target);
  }

  // optional float length = 5;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->length(), target);
  }

  // optional int32 lane_count = 6;
  if (has_lane_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lane_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrafficRouting.RoadMessage)
  return target;
}

int RoadMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 osm_id = 1;
    if (has_osm_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->osm_id());
    }

    // required string road_name = 2;
    if (has_road_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->road_name());
    }

    // required string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional float length = 5;
    if (has_length()) {
      total_size += 1 + 4;
    }

    // optional int32 lane_count = 6;
    if (has_lane_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lane_count());
    }

  }
  // repeated .TrafficRouting.PointMessage geometry = 4;
  total_size += 1 * this->geometry_size();
  for (int i = 0; i < this->geometry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->geometry(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoadMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoadMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoadMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoadMessage::MergeFrom(const RoadMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  geometry_.MergeFrom(from.geometry_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_osm_id()) {
      set_osm_id(from.osm_id());
    }
    if (from.has_road_name()) {
      set_road_name(from.road_name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_lane_count()) {
      set_lane_count(from.lane_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoadMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadMessage::CopyFrom(const RoadMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->geometry())) return false;
  return true;
}

void RoadMessage::Swap(RoadMessage* other) {
  if (other != this) {
    std::swap(osm_id_, other->osm_id_);
    std::swap(road_name_, other->road_name_);
    std::swap(type_, other->type_);
    geometry_.Swap(&other->geometry_);
    std::swap(length_, other->length_);
    std::swap(lane_count_, other->lane_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoadMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoadMessage_descriptor_;
  metadata.reflection = RoadMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UtilPathElement::kDepartTimeFieldNumber;
const int UtilPathElement::kIdFieldNumber;
const int UtilPathElement::kRoadFieldNumber;
const int UtilPathElement::kArrivalTimeFieldNumber;
const int UtilPathElement::kDepartureTimeFieldNumber;
#endif  // !_MSC_VER

UtilPathElement::UtilPathElement()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TrafficRouting.UtilPathElement)
}

void UtilPathElement::InitAsDefaultInstance() {
  road_ = const_cast< ::TrafficRouting::RoadMessage*>(&::TrafficRouting::RoadMessage::default_instance());
  arrival_time_ = const_cast< ::TrafficRouting::NormalDistribution*>(&::TrafficRouting::NormalDistribution::default_instance());
  departure_time_ = const_cast< ::TrafficRouting::NormalDistribution*>(&::TrafficRouting::NormalDistribution::default_instance());
}

UtilPathElement::UtilPathElement(const UtilPathElement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TrafficRouting.UtilPathElement)
}

void UtilPathElement::SharedCtor() {
  _cached_size_ = 0;
  depart_time_ = 0;
  id_ = 0;
  road_ = NULL;
  arrival_time_ = NULL;
  departure_time_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UtilPathElement::~UtilPathElement() {
  // @@protoc_insertion_point(destructor:TrafficRouting.UtilPathElement)
  SharedDtor();
}

void UtilPathElement::SharedDtor() {
  if (this != default_instance_) {
    delete road_;
    delete arrival_time_;
    delete departure_time_;
  }
}

void UtilPathElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UtilPathElement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UtilPathElement_descriptor_;
}

const UtilPathElement& UtilPathElement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_route_2eproto();
  return *default_instance_;
}

UtilPathElement* UtilPathElement::default_instance_ = NULL;

UtilPathElement* UtilPathElement::New() const {
  return new UtilPathElement;
}

void UtilPathElement::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UtilPathElement*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(depart_time_, id_);
    if (has_road()) {
      if (road_ != NULL) road_->::TrafficRouting::RoadMessage::Clear();
    }
    if (has_arrival_time()) {
      if (arrival_time_ != NULL) arrival_time_->::TrafficRouting::NormalDistribution::Clear();
    }
    if (has_departure_time()) {
      if (departure_time_ != NULL) departure_time_->::TrafficRouting::NormalDistribution::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UtilPathElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TrafficRouting.UtilPathElement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float depart_time = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &depart_time_)));
          set_has_depart_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_road;
        break;
      }

      // required .TrafficRouting.RoadMessage road = 3;
      case 3: {
        if (tag == 26) {
         parse_road:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_road()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_arrival_time;
        break;
      }

      // required .TrafficRouting.NormalDistribution arrival_time = 4;
      case 4: {
        if (tag == 34) {
         parse_arrival_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arrival_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_departure_time;
        break;
      }

      // required .TrafficRouting.NormalDistribution departure_time = 5;
      case 5: {
        if (tag == 42) {
         parse_departure_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_departure_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TrafficRouting.UtilPathElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TrafficRouting.UtilPathElement)
  return false;
#undef DO_
}

void UtilPathElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TrafficRouting.UtilPathElement)
  // optional float depart_time = 1;
  if (has_depart_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->depart_time(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // required .TrafficRouting.RoadMessage road = 3;
  if (has_road()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->road(), output);
  }

  // required .TrafficRouting.NormalDistribution arrival_time = 4;
  if (has_arrival_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->arrival_time(), output);
  }

  // required .TrafficRouting.NormalDistribution departure_time = 5;
  if (has_departure_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->departure_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TrafficRouting.UtilPathElement)
}

::google::protobuf::uint8* UtilPathElement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TrafficRouting.UtilPathElement)
  // optional float depart_time = 1;
  if (has_depart_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->depart_time(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // required .TrafficRouting.RoadMessage road = 3;
  if (has_road()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->road(), target);
  }

  // required .TrafficRouting.NormalDistribution arrival_time = 4;
  if (has_arrival_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->arrival_time(), target);
  }

  // required .TrafficRouting.NormalDistribution departure_time = 5;
  if (has_departure_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->departure_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrafficRouting.UtilPathElement)
  return target;
}

int UtilPathElement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float depart_time = 1;
    if (has_depart_time()) {
      total_size += 1 + 4;
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .TrafficRouting.RoadMessage road = 3;
    if (has_road()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->road());
    }

    // required .TrafficRouting.NormalDistribution arrival_time = 4;
    if (has_arrival_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arrival_time());
    }

    // required .TrafficRouting.NormalDistribution departure_time = 5;
    if (has_departure_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->departure_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UtilPathElement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UtilPathElement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UtilPathElement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UtilPathElement::MergeFrom(const UtilPathElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_depart_time()) {
      set_depart_time(from.depart_time());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_road()) {
      mutable_road()->::TrafficRouting::RoadMessage::MergeFrom(from.road());
    }
    if (from.has_arrival_time()) {
      mutable_arrival_time()->::TrafficRouting::NormalDistribution::MergeFrom(from.arrival_time());
    }
    if (from.has_departure_time()) {
      mutable_departure_time()->::TrafficRouting::NormalDistribution::MergeFrom(from.departure_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UtilPathElement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UtilPathElement::CopyFrom(const UtilPathElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UtilPathElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  if (has_road()) {
    if (!this->road().IsInitialized()) return false;
  }
  if (has_arrival_time()) {
    if (!this->arrival_time().IsInitialized()) return false;
  }
  if (has_departure_time()) {
    if (!this->departure_time().IsInitialized()) return false;
  }
  return true;
}

void UtilPathElement::Swap(UtilPathElement* other) {
  if (other != this) {
    std::swap(depart_time_, other->depart_time_);
    std::swap(id_, other->id_);
    std::swap(road_, other->road_);
    std::swap(arrival_time_, other->arrival_time_);
    std::swap(departure_time_, other->departure_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UtilPathElement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UtilPathElement_descriptor_;
  metadata.reflection = UtilPathElement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Route::kPathElementFieldNumber;
#endif  // !_MSC_VER

Route::Route()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TrafficRouting.Route)
}

void Route::InitAsDefaultInstance() {
}

Route::Route(const Route& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TrafficRouting.Route)
}

void Route::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Route::~Route() {
  // @@protoc_insertion_point(destructor:TrafficRouting.Route)
  SharedDtor();
}

void Route::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Route::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Route::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Route_descriptor_;
}

const Route& Route::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_route_2eproto();
  return *default_instance_;
}

Route* Route::default_instance_ = NULL;

Route* Route::New() const {
  return new Route;
}

void Route::Clear() {
  path_element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Route::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TrafficRouting.Route)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TrafficRouting.UtilPathElement path_element = 1;
      case 1: {
        if (tag == 10) {
         parse_path_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_path_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_path_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TrafficRouting.Route)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TrafficRouting.Route)
  return false;
#undef DO_
}

void Route::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TrafficRouting.Route)
  // repeated .TrafficRouting.UtilPathElement path_element = 1;
  for (int i = 0; i < this->path_element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->path_element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TrafficRouting.Route)
}

::google::protobuf::uint8* Route::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TrafficRouting.Route)
  // repeated .TrafficRouting.UtilPathElement path_element = 1;
  for (int i = 0; i < this->path_element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->path_element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrafficRouting.Route)
  return target;
}

int Route::ByteSize() const {
  int total_size = 0;

  // repeated .TrafficRouting.UtilPathElement path_element = 1;
  total_size += 1 * this->path_element_size();
  for (int i = 0; i < this->path_element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path_element(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Route::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Route* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Route*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Route::MergeFrom(const Route& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_element_.MergeFrom(from.path_element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Route::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Route::CopyFrom(const Route& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Route::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->path_element())) return false;
  return true;
}

void Route::Swap(Route* other) {
  if (other != this) {
    path_element_.Swap(&other->path_element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Route::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Route_descriptor_;
  metadata.reflection = Route_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TrafficRouting

// @@protoc_insertion_point(global_scope)
