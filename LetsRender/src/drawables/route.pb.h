// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: route.proto

#ifndef PROTOBUF_route_2eproto__INCLUDED
#define PROTOBUF_route_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace TrafficRouting {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_route_2eproto();
void protobuf_AssignDesc_route_2eproto();
void protobuf_ShutdownFile_route_2eproto();

class NormalDistribution;
class PointMessage;
class RoadMessage;
class UtilPathElement;
class Route;

// ===================================================================

class NormalDistribution : public ::google::protobuf::Message {
 public:
  NormalDistribution();
  virtual ~NormalDistribution();

  NormalDistribution(const NormalDistribution& from);

  inline NormalDistribution& operator=(const NormalDistribution& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NormalDistribution& default_instance();

  void Swap(NormalDistribution* other);

  // implements Message ----------------------------------------------

  NormalDistribution* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NormalDistribution& from);
  void MergeFrom(const NormalDistribution& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double mean = 1;
  inline bool has_mean() const;
  inline void clear_mean();
  static const int kMeanFieldNumber = 1;
  inline double mean() const;
  inline void set_mean(double value);

  // required double standard_deviation = 2;
  inline bool has_standard_deviation() const;
  inline void clear_standard_deviation();
  static const int kStandardDeviationFieldNumber = 2;
  inline double standard_deviation() const;
  inline void set_standard_deviation(double value);

  // @@protoc_insertion_point(class_scope:TrafficRouting.NormalDistribution)
 private:
  inline void set_has_mean();
  inline void clear_has_mean();
  inline void set_has_standard_deviation();
  inline void clear_has_standard_deviation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double mean_;
  double standard_deviation_;
  friend void  protobuf_AddDesc_route_2eproto();
  friend void protobuf_AssignDesc_route_2eproto();
  friend void protobuf_ShutdownFile_route_2eproto();

  void InitAsDefaultInstance();
  static NormalDistribution* default_instance_;
};
// -------------------------------------------------------------------

class PointMessage : public ::google::protobuf::Message {
 public:
  PointMessage();
  virtual ~PointMessage();

  PointMessage(const PointMessage& from);

  inline PointMessage& operator=(const PointMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PointMessage& default_instance();

  void Swap(PointMessage* other);

  // implements Message ----------------------------------------------

  PointMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PointMessage& from);
  void MergeFrom(const PointMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional float longitude = 3;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 3;
  inline float longitude() const;
  inline void set_longitude(float value);

  // optional float latitude = 4;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 4;
  inline float latitude() const;
  inline void set_latitude(float value);

  // @@protoc_insertion_point(class_scope:TrafficRouting.PointMessage)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_latitude();
  inline void clear_has_latitude();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  float longitude_;
  float latitude_;
  friend void  protobuf_AddDesc_route_2eproto();
  friend void protobuf_AssignDesc_route_2eproto();
  friend void protobuf_ShutdownFile_route_2eproto();

  void InitAsDefaultInstance();
  static PointMessage* default_instance_;
};
// -------------------------------------------------------------------

class RoadMessage : public ::google::protobuf::Message {
 public:
  RoadMessage();
  virtual ~RoadMessage();

  RoadMessage(const RoadMessage& from);

  inline RoadMessage& operator=(const RoadMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoadMessage& default_instance();

  void Swap(RoadMessage* other);

  // implements Message ----------------------------------------------

  RoadMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoadMessage& from);
  void MergeFrom(const RoadMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 osm_id = 1;
  inline bool has_osm_id() const;
  inline void clear_osm_id();
  static const int kOsmIdFieldNumber = 1;
  inline ::google::protobuf::int32 osm_id() const;
  inline void set_osm_id(::google::protobuf::int32 value);

  // required string road_name = 2;
  inline bool has_road_name() const;
  inline void clear_road_name();
  static const int kRoadNameFieldNumber = 2;
  inline const ::std::string& road_name() const;
  inline void set_road_name(const ::std::string& value);
  inline void set_road_name(const char* value);
  inline void set_road_name(const char* value, size_t size);
  inline ::std::string* mutable_road_name();
  inline ::std::string* release_road_name();
  inline void set_allocated_road_name(::std::string* road_name);

  // required string type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // repeated .TrafficRouting.PointMessage geometry = 4;
  inline int geometry_size() const;
  inline void clear_geometry();
  static const int kGeometryFieldNumber = 4;
  inline const ::TrafficRouting::PointMessage& geometry(int index) const;
  inline ::TrafficRouting::PointMessage* mutable_geometry(int index);
  inline ::TrafficRouting::PointMessage* add_geometry();
  inline const ::google::protobuf::RepeatedPtrField< ::TrafficRouting::PointMessage >&
      geometry() const;
  inline ::google::protobuf::RepeatedPtrField< ::TrafficRouting::PointMessage >*
      mutable_geometry();

  // optional float length = 5;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 5;
  inline float length() const;
  inline void set_length(float value);

  // optional int32 lane_count = 6;
  inline bool has_lane_count() const;
  inline void clear_lane_count();
  static const int kLaneCountFieldNumber = 6;
  inline ::google::protobuf::int32 lane_count() const;
  inline void set_lane_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TrafficRouting.RoadMessage)
 private:
  inline void set_has_osm_id();
  inline void clear_has_osm_id();
  inline void set_has_road_name();
  inline void clear_has_road_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_lane_count();
  inline void clear_has_lane_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* road_name_;
  ::std::string* type_;
  ::google::protobuf::int32 osm_id_;
  float length_;
  ::google::protobuf::RepeatedPtrField< ::TrafficRouting::PointMessage > geometry_;
  ::google::protobuf::int32 lane_count_;
  friend void  protobuf_AddDesc_route_2eproto();
  friend void protobuf_AssignDesc_route_2eproto();
  friend void protobuf_ShutdownFile_route_2eproto();

  void InitAsDefaultInstance();
  static RoadMessage* default_instance_;
};
// -------------------------------------------------------------------

class UtilPathElement : public ::google::protobuf::Message {
 public:
  UtilPathElement();
  virtual ~UtilPathElement();

  UtilPathElement(const UtilPathElement& from);

  inline UtilPathElement& operator=(const UtilPathElement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UtilPathElement& default_instance();

  void Swap(UtilPathElement* other);

  // implements Message ----------------------------------------------

  UtilPathElement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UtilPathElement& from);
  void MergeFrom(const UtilPathElement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float depart_time = 1;
  inline bool has_depart_time() const;
  inline void clear_depart_time();
  static const int kDepartTimeFieldNumber = 1;
  inline float depart_time() const;
  inline void set_depart_time(float value);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required .TrafficRouting.RoadMessage road = 3;
  inline bool has_road() const;
  inline void clear_road();
  static const int kRoadFieldNumber = 3;
  inline const ::TrafficRouting::RoadMessage& road() const;
  inline ::TrafficRouting::RoadMessage* mutable_road();
  inline ::TrafficRouting::RoadMessage* release_road();
  inline void set_allocated_road(::TrafficRouting::RoadMessage* road);

  // required .TrafficRouting.NormalDistribution arrival_time = 4;
  inline bool has_arrival_time() const;
  inline void clear_arrival_time();
  static const int kArrivalTimeFieldNumber = 4;
  inline const ::TrafficRouting::NormalDistribution& arrival_time() const;
  inline ::TrafficRouting::NormalDistribution* mutable_arrival_time();
  inline ::TrafficRouting::NormalDistribution* release_arrival_time();
  inline void set_allocated_arrival_time(::TrafficRouting::NormalDistribution* arrival_time);

  // required .TrafficRouting.NormalDistribution departure_time = 5;
  inline bool has_departure_time() const;
  inline void clear_departure_time();
  static const int kDepartureTimeFieldNumber = 5;
  inline const ::TrafficRouting::NormalDistribution& departure_time() const;
  inline ::TrafficRouting::NormalDistribution* mutable_departure_time();
  inline ::TrafficRouting::NormalDistribution* release_departure_time();
  inline void set_allocated_departure_time(::TrafficRouting::NormalDistribution* departure_time);

  // @@protoc_insertion_point(class_scope:TrafficRouting.UtilPathElement)
 private:
  inline void set_has_depart_time();
  inline void clear_has_depart_time();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_road();
  inline void clear_has_road();
  inline void set_has_arrival_time();
  inline void clear_has_arrival_time();
  inline void set_has_departure_time();
  inline void clear_has_departure_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float depart_time_;
  ::google::protobuf::int32 id_;
  ::TrafficRouting::RoadMessage* road_;
  ::TrafficRouting::NormalDistribution* arrival_time_;
  ::TrafficRouting::NormalDistribution* departure_time_;
  friend void  protobuf_AddDesc_route_2eproto();
  friend void protobuf_AssignDesc_route_2eproto();
  friend void protobuf_ShutdownFile_route_2eproto();

  void InitAsDefaultInstance();
  static UtilPathElement* default_instance_;
};
// -------------------------------------------------------------------

class Route : public ::google::protobuf::Message {
 public:
  Route();
  virtual ~Route();

  Route(const Route& from);

  inline Route& operator=(const Route& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Route& default_instance();

  void Swap(Route* other);

  // implements Message ----------------------------------------------

  Route* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Route& from);
  void MergeFrom(const Route& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TrafficRouting.UtilPathElement path_element = 1;
  inline int path_element_size() const;
  inline void clear_path_element();
  static const int kPathElementFieldNumber = 1;
  inline const ::TrafficRouting::UtilPathElement& path_element(int index) const;
  inline ::TrafficRouting::UtilPathElement* mutable_path_element(int index);
  inline ::TrafficRouting::UtilPathElement* add_path_element();
  inline const ::google::protobuf::RepeatedPtrField< ::TrafficRouting::UtilPathElement >&
      path_element() const;
  inline ::google::protobuf::RepeatedPtrField< ::TrafficRouting::UtilPathElement >*
      mutable_path_element();

  // @@protoc_insertion_point(class_scope:TrafficRouting.Route)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::TrafficRouting::UtilPathElement > path_element_;
  friend void  protobuf_AddDesc_route_2eproto();
  friend void protobuf_AssignDesc_route_2eproto();
  friend void protobuf_ShutdownFile_route_2eproto();

  void InitAsDefaultInstance();
  static Route* default_instance_;
};
// ===================================================================


// ===================================================================

// NormalDistribution

// required double mean = 1;
inline bool NormalDistribution::has_mean() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NormalDistribution::set_has_mean() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NormalDistribution::clear_has_mean() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NormalDistribution::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline double NormalDistribution::mean() const {
  // @@protoc_insertion_point(field_get:TrafficRouting.NormalDistribution.mean)
  return mean_;
}
inline void NormalDistribution::set_mean(double value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:TrafficRouting.NormalDistribution.mean)
}

// required double standard_deviation = 2;
inline bool NormalDistribution::has_standard_deviation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NormalDistribution::set_has_standard_deviation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NormalDistribution::clear_has_standard_deviation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NormalDistribution::clear_standard_deviation() {
  standard_deviation_ = 0;
  clear_has_standard_deviation();
}
inline double NormalDistribution::standard_deviation() const {
  // @@protoc_insertion_point(field_get:TrafficRouting.NormalDistribution.standard_deviation)
  return standard_deviation_;
}
inline void NormalDistribution::set_standard_deviation(double value) {
  set_has_standard_deviation();
  standard_deviation_ = value;
  // @@protoc_insertion_point(field_set:TrafficRouting.NormalDistribution.standard_deviation)
}

// -------------------------------------------------------------------

// PointMessage

// required float x = 1;
inline bool PointMessage::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PointMessage::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PointMessage::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PointMessage::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float PointMessage::x() const {
  // @@protoc_insertion_point(field_get:TrafficRouting.PointMessage.x)
  return x_;
}
inline void PointMessage::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:TrafficRouting.PointMessage.x)
}

// required float y = 2;
inline bool PointMessage::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PointMessage::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PointMessage::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PointMessage::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float PointMessage::y() const {
  // @@protoc_insertion_point(field_get:TrafficRouting.PointMessage.y)
  return y_;
}
inline void PointMessage::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:TrafficRouting.PointMessage.y)
}

// optional float longitude = 3;
inline bool PointMessage::has_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PointMessage::set_has_longitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PointMessage::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PointMessage::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline float PointMessage::longitude() const {
  // @@protoc_insertion_point(field_get:TrafficRouting.PointMessage.longitude)
  return longitude_;
}
inline void PointMessage::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:TrafficRouting.PointMessage.longitude)
}

// optional float latitude = 4;
inline bool PointMessage::has_latitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PointMessage::set_has_latitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PointMessage::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PointMessage::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline float PointMessage::latitude() const {
  // @@protoc_insertion_point(field_get:TrafficRouting.PointMessage.latitude)
  return latitude_;
}
inline void PointMessage::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:TrafficRouting.PointMessage.latitude)
}

// -------------------------------------------------------------------

// RoadMessage

// required int32 osm_id = 1;
inline bool RoadMessage::has_osm_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoadMessage::set_has_osm_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoadMessage::clear_has_osm_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoadMessage::clear_osm_id() {
  osm_id_ = 0;
  clear_has_osm_id();
}
inline ::google::protobuf::int32 RoadMessage::osm_id() const {
  // @@protoc_insertion_point(field_get:TrafficRouting.RoadMessage.osm_id)
  return osm_id_;
}
inline void RoadMessage::set_osm_id(::google::protobuf::int32 value) {
  set_has_osm_id();
  osm_id_ = value;
  // @@protoc_insertion_point(field_set:TrafficRouting.RoadMessage.osm_id)
}

// required string road_name = 2;
inline bool RoadMessage::has_road_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoadMessage::set_has_road_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoadMessage::clear_has_road_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoadMessage::clear_road_name() {
  if (road_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    road_name_->clear();
  }
  clear_has_road_name();
}
inline const ::std::string& RoadMessage::road_name() const {
  // @@protoc_insertion_point(field_get:TrafficRouting.RoadMessage.road_name)
  return *road_name_;
}
inline void RoadMessage::set_road_name(const ::std::string& value) {
  set_has_road_name();
  if (road_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    road_name_ = new ::std::string;
  }
  road_name_->assign(value);
  // @@protoc_insertion_point(field_set:TrafficRouting.RoadMessage.road_name)
}
inline void RoadMessage::set_road_name(const char* value) {
  set_has_road_name();
  if (road_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    road_name_ = new ::std::string;
  }
  road_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:TrafficRouting.RoadMessage.road_name)
}
inline void RoadMessage::set_road_name(const char* value, size_t size) {
  set_has_road_name();
  if (road_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    road_name_ = new ::std::string;
  }
  road_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TrafficRouting.RoadMessage.road_name)
}
inline ::std::string* RoadMessage::mutable_road_name() {
  set_has_road_name();
  if (road_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    road_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TrafficRouting.RoadMessage.road_name)
  return road_name_;
}
inline ::std::string* RoadMessage::release_road_name() {
  clear_has_road_name();
  if (road_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = road_name_;
    road_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoadMessage::set_allocated_road_name(::std::string* road_name) {
  if (road_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete road_name_;
  }
  if (road_name) {
    set_has_road_name();
    road_name_ = road_name;
  } else {
    clear_has_road_name();
    road_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TrafficRouting.RoadMessage.road_name)
}

// required string type = 3;
inline bool RoadMessage::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoadMessage::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoadMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoadMessage::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& RoadMessage::type() const {
  // @@protoc_insertion_point(field_get:TrafficRouting.RoadMessage.type)
  return *type_;
}
inline void RoadMessage::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:TrafficRouting.RoadMessage.type)
}
inline void RoadMessage::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:TrafficRouting.RoadMessage.type)
}
inline void RoadMessage::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TrafficRouting.RoadMessage.type)
}
inline ::std::string* RoadMessage::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TrafficRouting.RoadMessage.type)
  return type_;
}
inline ::std::string* RoadMessage::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoadMessage::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TrafficRouting.RoadMessage.type)
}

// repeated .TrafficRouting.PointMessage geometry = 4;
inline int RoadMessage::geometry_size() const {
  return geometry_.size();
}
inline void RoadMessage::clear_geometry() {
  geometry_.Clear();
}
inline const ::TrafficRouting::PointMessage& RoadMessage::geometry(int index) const {
  // @@protoc_insertion_point(field_get:TrafficRouting.RoadMessage.geometry)
  return geometry_.Get(index);
}
inline ::TrafficRouting::PointMessage* RoadMessage::mutable_geometry(int index) {
  // @@protoc_insertion_point(field_mutable:TrafficRouting.RoadMessage.geometry)
  return geometry_.Mutable(index);
}
inline ::TrafficRouting::PointMessage* RoadMessage::add_geometry() {
  // @@protoc_insertion_point(field_add:TrafficRouting.RoadMessage.geometry)
  return geometry_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TrafficRouting::PointMessage >&
RoadMessage::geometry() const {
  // @@protoc_insertion_point(field_list:TrafficRouting.RoadMessage.geometry)
  return geometry_;
}
inline ::google::protobuf::RepeatedPtrField< ::TrafficRouting::PointMessage >*
RoadMessage::mutable_geometry() {
  // @@protoc_insertion_point(field_mutable_list:TrafficRouting.RoadMessage.geometry)
  return &geometry_;
}

// optional float length = 5;
inline bool RoadMessage::has_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoadMessage::set_has_length() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoadMessage::clear_has_length() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoadMessage::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline float RoadMessage::length() const {
  // @@protoc_insertion_point(field_get:TrafficRouting.RoadMessage.length)
  return length_;
}
inline void RoadMessage::set_length(float value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:TrafficRouting.RoadMessage.length)
}

// optional int32 lane_count = 6;
inline bool RoadMessage::has_lane_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoadMessage::set_has_lane_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RoadMessage::clear_has_lane_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RoadMessage::clear_lane_count() {
  lane_count_ = 0;
  clear_has_lane_count();
}
inline ::google::protobuf::int32 RoadMessage::lane_count() const {
  // @@protoc_insertion_point(field_get:TrafficRouting.RoadMessage.lane_count)
  return lane_count_;
}
inline void RoadMessage::set_lane_count(::google::protobuf::int32 value) {
  set_has_lane_count();
  lane_count_ = value;
  // @@protoc_insertion_point(field_set:TrafficRouting.RoadMessage.lane_count)
}

// -------------------------------------------------------------------

// UtilPathElement

// optional float depart_time = 1;
inline bool UtilPathElement::has_depart_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UtilPathElement::set_has_depart_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UtilPathElement::clear_has_depart_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UtilPathElement::clear_depart_time() {
  depart_time_ = 0;
  clear_has_depart_time();
}
inline float UtilPathElement::depart_time() const {
  // @@protoc_insertion_point(field_get:TrafficRouting.UtilPathElement.depart_time)
  return depart_time_;
}
inline void UtilPathElement::set_depart_time(float value) {
  set_has_depart_time();
  depart_time_ = value;
  // @@protoc_insertion_point(field_set:TrafficRouting.UtilPathElement.depart_time)
}

// required int32 id = 2;
inline bool UtilPathElement::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UtilPathElement::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UtilPathElement::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UtilPathElement::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UtilPathElement::id() const {
  // @@protoc_insertion_point(field_get:TrafficRouting.UtilPathElement.id)
  return id_;
}
inline void UtilPathElement::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:TrafficRouting.UtilPathElement.id)
}

// required .TrafficRouting.RoadMessage road = 3;
inline bool UtilPathElement::has_road() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UtilPathElement::set_has_road() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UtilPathElement::clear_has_road() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UtilPathElement::clear_road() {
  if (road_ != NULL) road_->::TrafficRouting::RoadMessage::Clear();
  clear_has_road();
}
inline const ::TrafficRouting::RoadMessage& UtilPathElement::road() const {
  // @@protoc_insertion_point(field_get:TrafficRouting.UtilPathElement.road)
  return road_ != NULL ? *road_ : *default_instance_->road_;
}
inline ::TrafficRouting::RoadMessage* UtilPathElement::mutable_road() {
  set_has_road();
  if (road_ == NULL) road_ = new ::TrafficRouting::RoadMessage;
  // @@protoc_insertion_point(field_mutable:TrafficRouting.UtilPathElement.road)
  return road_;
}
inline ::TrafficRouting::RoadMessage* UtilPathElement::release_road() {
  clear_has_road();
  ::TrafficRouting::RoadMessage* temp = road_;
  road_ = NULL;
  return temp;
}
inline void UtilPathElement::set_allocated_road(::TrafficRouting::RoadMessage* road) {
  delete road_;
  road_ = road;
  if (road) {
    set_has_road();
  } else {
    clear_has_road();
  }
  // @@protoc_insertion_point(field_set_allocated:TrafficRouting.UtilPathElement.road)
}

// required .TrafficRouting.NormalDistribution arrival_time = 4;
inline bool UtilPathElement::has_arrival_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UtilPathElement::set_has_arrival_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UtilPathElement::clear_has_arrival_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UtilPathElement::clear_arrival_time() {
  if (arrival_time_ != NULL) arrival_time_->::TrafficRouting::NormalDistribution::Clear();
  clear_has_arrival_time();
}
inline const ::TrafficRouting::NormalDistribution& UtilPathElement::arrival_time() const {
  // @@protoc_insertion_point(field_get:TrafficRouting.UtilPathElement.arrival_time)
  return arrival_time_ != NULL ? *arrival_time_ : *default_instance_->arrival_time_;
}
inline ::TrafficRouting::NormalDistribution* UtilPathElement::mutable_arrival_time() {
  set_has_arrival_time();
  if (arrival_time_ == NULL) arrival_time_ = new ::TrafficRouting::NormalDistribution;
  // @@protoc_insertion_point(field_mutable:TrafficRouting.UtilPathElement.arrival_time)
  return arrival_time_;
}
inline ::TrafficRouting::NormalDistribution* UtilPathElement::release_arrival_time() {
  clear_has_arrival_time();
  ::TrafficRouting::NormalDistribution* temp = arrival_time_;
  arrival_time_ = NULL;
  return temp;
}
inline void UtilPathElement::set_allocated_arrival_time(::TrafficRouting::NormalDistribution* arrival_time) {
  delete arrival_time_;
  arrival_time_ = arrival_time;
  if (arrival_time) {
    set_has_arrival_time();
  } else {
    clear_has_arrival_time();
  }
  // @@protoc_insertion_point(field_set_allocated:TrafficRouting.UtilPathElement.arrival_time)
}

// required .TrafficRouting.NormalDistribution departure_time = 5;
inline bool UtilPathElement::has_departure_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UtilPathElement::set_has_departure_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UtilPathElement::clear_has_departure_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UtilPathElement::clear_departure_time() {
  if (departure_time_ != NULL) departure_time_->::TrafficRouting::NormalDistribution::Clear();
  clear_has_departure_time();
}
inline const ::TrafficRouting::NormalDistribution& UtilPathElement::departure_time() const {
  // @@protoc_insertion_point(field_get:TrafficRouting.UtilPathElement.departure_time)
  return departure_time_ != NULL ? *departure_time_ : *default_instance_->departure_time_;
}
inline ::TrafficRouting::NormalDistribution* UtilPathElement::mutable_departure_time() {
  set_has_departure_time();
  if (departure_time_ == NULL) departure_time_ = new ::TrafficRouting::NormalDistribution;
  // @@protoc_insertion_point(field_mutable:TrafficRouting.UtilPathElement.departure_time)
  return departure_time_;
}
inline ::TrafficRouting::NormalDistribution* UtilPathElement::release_departure_time() {
  clear_has_departure_time();
  ::TrafficRouting::NormalDistribution* temp = departure_time_;
  departure_time_ = NULL;
  return temp;
}
inline void UtilPathElement::set_allocated_departure_time(::TrafficRouting::NormalDistribution* departure_time) {
  delete departure_time_;
  departure_time_ = departure_time;
  if (departure_time) {
    set_has_departure_time();
  } else {
    clear_has_departure_time();
  }
  // @@protoc_insertion_point(field_set_allocated:TrafficRouting.UtilPathElement.departure_time)
}

// -------------------------------------------------------------------

// Route

// repeated .TrafficRouting.UtilPathElement path_element = 1;
inline int Route::path_element_size() const {
  return path_element_.size();
}
inline void Route::clear_path_element() {
  path_element_.Clear();
}
inline const ::TrafficRouting::UtilPathElement& Route::path_element(int index) const {
  // @@protoc_insertion_point(field_get:TrafficRouting.Route.path_element)
  return path_element_.Get(index);
}
inline ::TrafficRouting::UtilPathElement* Route::mutable_path_element(int index) {
  // @@protoc_insertion_point(field_mutable:TrafficRouting.Route.path_element)
  return path_element_.Mutable(index);
}
inline ::TrafficRouting::UtilPathElement* Route::add_path_element() {
  // @@protoc_insertion_point(field_add:TrafficRouting.Route.path_element)
  return path_element_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TrafficRouting::UtilPathElement >&
Route::path_element() const {
  // @@protoc_insertion_point(field_list:TrafficRouting.Route.path_element)
  return path_element_;
}
inline ::google::protobuf::RepeatedPtrField< ::TrafficRouting::UtilPathElement >*
Route::mutable_path_element() {
  // @@protoc_insertion_point(field_mutable_list:TrafficRouting.Route.path_element)
  return &path_element_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TrafficRouting

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_route_2eproto__INCLUDED
