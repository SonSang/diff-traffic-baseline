// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: location.proto

#ifndef PROTOBUF_location_2eproto__INCLUDED
#define PROTOBUF_location_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace routing {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_location_2eproto();
void protobuf_AssignDesc_location_2eproto();
void protobuf_ShutdownFile_location_2eproto();

class Location;
class RoutingQuery;

// ===================================================================

class Location : public ::google::protobuf::Message {
 public:
  Location();
  virtual ~Location();

  Location(const Location& from);

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Location& default_instance();

  void Swap(Location* other);

  // implements Message ----------------------------------------------

  Location* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float latitude = 1;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  inline float latitude() const;
  inline void set_latitude(float value);

  // required float longitude = 2;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  inline float longitude() const;
  inline void set_longitude(float value);

  // optional float direction = 3;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 3;
  inline float direction() const;
  inline void set_direction(float value);

  // @@protoc_insertion_point(class_scope:routing.Location)
 private:
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_direction();
  inline void clear_has_direction();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float latitude_;
  float longitude_;
  float direction_;
  friend void  protobuf_AddDesc_location_2eproto();
  friend void protobuf_AssignDesc_location_2eproto();
  friend void protobuf_ShutdownFile_location_2eproto();

  void InitAsDefaultInstance();
  static Location* default_instance_;
};
// -------------------------------------------------------------------

class RoutingQuery : public ::google::protobuf::Message {
 public:
  RoutingQuery();
  virtual ~RoutingQuery();

  RoutingQuery(const RoutingQuery& from);

  inline RoutingQuery& operator=(const RoutingQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoutingQuery& default_instance();

  void Swap(RoutingQuery* other);

  // implements Message ----------------------------------------------

  RoutingQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoutingQuery& from);
  void MergeFrom(const RoutingQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .routing.Location current_location = 1;
  inline bool has_current_location() const;
  inline void clear_current_location();
  static const int kCurrentLocationFieldNumber = 1;
  inline const ::routing::Location& current_location() const;
  inline ::routing::Location* mutable_current_location();
  inline ::routing::Location* release_current_location();
  inline void set_allocated_current_location(::routing::Location* current_location);

  // required .routing.Location destination_location = 2;
  inline bool has_destination_location() const;
  inline void clear_destination_location();
  static const int kDestinationLocationFieldNumber = 2;
  inline const ::routing::Location& destination_location() const;
  inline ::routing::Location* mutable_destination_location();
  inline ::routing::Location* release_destination_location();
  inline void set_allocated_destination_location(::routing::Location* destination_location);

  // @@protoc_insertion_point(class_scope:routing.RoutingQuery)
 private:
  inline void set_has_current_location();
  inline void clear_has_current_location();
  inline void set_has_destination_location();
  inline void clear_has_destination_location();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::routing::Location* current_location_;
  ::routing::Location* destination_location_;
  friend void  protobuf_AddDesc_location_2eproto();
  friend void protobuf_AssignDesc_location_2eproto();
  friend void protobuf_ShutdownFile_location_2eproto();

  void InitAsDefaultInstance();
  static RoutingQuery* default_instance_;
};
// ===================================================================


// ===================================================================

// Location

// required float latitude = 1;
inline bool Location::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Location::set_has_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Location::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Location::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline float Location::latitude() const {
  // @@protoc_insertion_point(field_get:routing.Location.latitude)
  return latitude_;
}
inline void Location::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:routing.Location.latitude)
}

// required float longitude = 2;
inline bool Location::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Location::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Location::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Location::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline float Location::longitude() const {
  // @@protoc_insertion_point(field_get:routing.Location.longitude)
  return longitude_;
}
inline void Location::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:routing.Location.longitude)
}

// optional float direction = 3;
inline bool Location::has_direction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Location::set_has_direction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Location::clear_has_direction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Location::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
inline float Location::direction() const {
  // @@protoc_insertion_point(field_get:routing.Location.direction)
  return direction_;
}
inline void Location::set_direction(float value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:routing.Location.direction)
}

// -------------------------------------------------------------------

// RoutingQuery

// required .routing.Location current_location = 1;
inline bool RoutingQuery::has_current_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoutingQuery::set_has_current_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoutingQuery::clear_has_current_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoutingQuery::clear_current_location() {
  if (current_location_ != NULL) current_location_->::routing::Location::Clear();
  clear_has_current_location();
}
inline const ::routing::Location& RoutingQuery::current_location() const {
  // @@protoc_insertion_point(field_get:routing.RoutingQuery.current_location)
  return current_location_ != NULL ? *current_location_ : *default_instance_->current_location_;
}
inline ::routing::Location* RoutingQuery::mutable_current_location() {
  set_has_current_location();
  if (current_location_ == NULL) current_location_ = new ::routing::Location;
  // @@protoc_insertion_point(field_mutable:routing.RoutingQuery.current_location)
  return current_location_;
}
inline ::routing::Location* RoutingQuery::release_current_location() {
  clear_has_current_location();
  ::routing::Location* temp = current_location_;
  current_location_ = NULL;
  return temp;
}
inline void RoutingQuery::set_allocated_current_location(::routing::Location* current_location) {
  delete current_location_;
  current_location_ = current_location;
  if (current_location) {
    set_has_current_location();
  } else {
    clear_has_current_location();
  }
  // @@protoc_insertion_point(field_set_allocated:routing.RoutingQuery.current_location)
}

// required .routing.Location destination_location = 2;
inline bool RoutingQuery::has_destination_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoutingQuery::set_has_destination_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoutingQuery::clear_has_destination_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoutingQuery::clear_destination_location() {
  if (destination_location_ != NULL) destination_location_->::routing::Location::Clear();
  clear_has_destination_location();
}
inline const ::routing::Location& RoutingQuery::destination_location() const {
  // @@protoc_insertion_point(field_get:routing.RoutingQuery.destination_location)
  return destination_location_ != NULL ? *destination_location_ : *default_instance_->destination_location_;
}
inline ::routing::Location* RoutingQuery::mutable_destination_location() {
  set_has_destination_location();
  if (destination_location_ == NULL) destination_location_ = new ::routing::Location;
  // @@protoc_insertion_point(field_mutable:routing.RoutingQuery.destination_location)
  return destination_location_;
}
inline ::routing::Location* RoutingQuery::release_destination_location() {
  clear_has_destination_location();
  ::routing::Location* temp = destination_location_;
  destination_location_ = NULL;
  return temp;
}
inline void RoutingQuery::set_allocated_destination_location(::routing::Location* destination_location) {
  delete destination_location_;
  destination_location_ = destination_location;
  if (destination_location) {
    set_has_destination_location();
  } else {
    clear_has_destination_location();
  }
  // @@protoc_insertion_point(field_set_allocated:routing.RoutingQuery.destination_location)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace routing

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_location_2eproto__INCLUDED
